export const generateSampleShader = (MAX_HISTOGRAM_SIZE: number, SAMPLES_PER_ROW: number, SAMPLES_PER_COL: number) => `
precision mediump float;uniform sampler2D u_image;uniform vec2 u_imageSize,u_gridCellDimensions;uniform int u_threshold;const vec3 i=vec3(0);vec3 f[${MAX_HISTOGRAM_SIZE}];int u[${MAX_HISTOGRAM_SIZE}];float r(float i){return floor(i+.5);}void main(){vec2 v=floor(gl_FragCoord.xy);ivec2 b=ivec2(v);v=u_imageSize/u_gridCellDimensions;b=ivec2(r(float(b.x)*v.x),r(float(b.y)*v.y));int m=0;for(int b=0;b<${MAX_HISTOGRAM_SIZE};b++)f[b]=i,u[b]=0;for(int v=0;v<${SAMPLES_PER_COL};v++)for(int r=0;r<${SAMPLES_PER_ROW};r++){ivec2 y=b+ivec2(r,v);if(y.x<0||y.y<0||y.x>=int(u_imageSize.x)||y.y>=int(u_imageSize.y))continue;vec3 e=texture2D(u_image,(vec2(y)+.5)/u_imageSize).xyz;if(length(e-i)<.001)continue;m++;bool x=false;for(int b=0;b<${MAX_HISTOGRAM_SIZE};b++)if(length(e-f[b])<.001){u[b]++;x=true;break;}if(!x)for(int b=0;b<${MAX_HISTOGRAM_SIZE};b++)if(u[b]==0){f[b]=e;u[b]=1;break;}}vec3 e=i;int x=0;for(int b=0;b<${MAX_HISTOGRAM_SIZE};b++)if(u[b]>x)e=f[b],x=u[b];gl_FragColor=m<u_threshold?vec4(i,0):vec4(e,1);}
`;
