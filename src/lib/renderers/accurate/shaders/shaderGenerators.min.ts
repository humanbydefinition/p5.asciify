export const generateCharacterSelectionShader = (sampleSize: number) => `
precision mediump float;uniform sampler2D u_characterTexture;uniform float u_charsetCols,u_charsetRows;uniform sampler2D u_sketchTexture;uniform vec2 u_gridPixelDimensions,u_gridCellDimensions;uniform sampler2D u_charPaletteTexture;uniform vec2 u_charPaletteSize;const float u=float(${sampleSize}),f=u*u;void main(){vec2 v=floor(floor(gl_FragCoord.xy).xy),t=u_gridPixelDimensions/u_gridCellDimensions,e=v*t/u_gridPixelDimensions;t=(v+vec2(1))*t/u_gridPixelDimensions;v=t-e;float s=1e20,i=0.,r=1./u,y=u_charPaletteSize.x;for(int t=0;t<1024;t++){if(float(t)>=y)break;vec2 m=vec2((float(t)+.5)/y,.5/u_charPaletteSize.y);vec4 d=texture2D(u_charPaletteTexture,m);float g=d.x*255.,x=d.y*255.,c=d.z*255.;c=g+x*256.+c*65536.;x=floor(c/u_charsetCols);g=c-u_charsetCols*x;m=vec2(g/u_charsetCols,x/u_charsetRows);vec2 k=vec2(1./u_charsetCols,1./u_charsetRows);g=0.;for(int f=0;f<int(u);f++)for(int s=0;s<int(u);s++){vec2 t=vec2(float(s)+.5,float(f)+.5)*r,i=e+t*v;float x=texture2D(u_sketchTexture,i).x;t=m+t*k;float c=texture2D(u_characterTexture,t).x;x-=c;g+=x*x;}g/=f;if(g<s)s=g,i=c;}s=mod(i,256.);i=floor(i/256.);s/=255.;i/=255.;gl_FragColor=vec4(s,i,0,1);}
`;



export const generateBrightnessSampleShader = (samplesPerRow: number, samplesPerColumn: number) => `
precision mediump float;uniform sampler2D u_inputImage;uniform vec2 u_inputImageSize;uniform int u_gridCols,u_gridRows;const int u=${samplesPerRow},f=${samplesPerColumn};void main(){vec2 v=floor(gl_FragCoord.xy),e=u_inputImageSize/vec2(float(u_gridCols),float(u_gridRows));v*=e;float i=0.,t=float(u*f);for(int s=0;s<u;s++)for(int g=0;g<f;g++){vec2 m=clamp((v+(vec2(float(s),float(g))+.5)*(e/vec2(float(u),float(f))))/u_inputImageSize,0.,1.);vec4 d=texture2D(u_inputImage,m);float t=.299*d.x+.587*d.y+.114*d.z;i+=t;}i/=t;gl_FragColor=vec4(vec3(i),1);}
`;

export const generateColorSampleShader = (numSlots: number, samplesPerRow: number, samplesPerColumn: number) => `
precision mediump float;uniform sampler2D u_inputImage,u_inputImageBW;uniform vec2 u_inputImageSize;uniform int u_gridCols,u_gridRows,u_colorRank;const int e=${numSlots},u=${samplesPerRow},f=${samplesPerColumn};void main(){vec2 i=floor(gl_FragCoord.xy),t=u_inputImageSize/vec2(float(u_gridCols),float(u_gridRows));i*=t;vec2 k=(i+t*.5)/u_inputImageSize;vec4 v=texture2D(u_inputImage,k),c[e];float b[e];for(int i=0;i<e;i++)c[i]=vec4(0),b[i]=0.;for(int v=0;v<u;v++)for(int k=0;k<f;k++){vec2 s=clamp((i+(vec2(float(v),float(k))+.5)*(t/vec2(float(u),float(f))))/u_inputImageSize,0.,1.);vec4 m=texture2D(u_inputImage,s),d=texture2D(u_inputImageBW,s);float r=step(.5,d.x);bool z=false;if(u_colorRank==1&&r>.5)z=true;else if(u_colorRank==2&&r<=.5)z=true;if(!z)continue;z=false;for(int i=0;i<e;i++)if(m.xyz==c[i].xyz){b[i]+=1.;z=true;break;}if(!z)for(int i=0;i<e;i++)if(b[i]==0.){c[i]=m;b[i]=1.;break;}}float z=0.;vec4 m=vec4(0);for(int i=0;i<e;i++){float u=b[i];vec4 k=c[i];if(u>z)z=u,m=k;}if(u_colorRank==2&&z==0.)m=v;gl_FragColor=vec4(m.xyz,1);}
`;