!function(A,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("p5")):"function"==typeof define&&define.amd?define(["p5"],e):(A="undefined"!=typeof globalThis?globalThis:A||self).P5Asciify=e(A.p5)}(this,(function(A){"use strict";class e extends Error{constructor(A){super(A),this.name="P5AsciifyError"}}class t{constructor({p5Instance:A,font:e,fontSize:t}){this.p5Instance=A,this.font=e,this.fontSize=t,this.characters=Object.values(this.font.font.glyphs.glyphs).filter((A=>void 0!==A.unicode)).map((A=>String.fromCharCode(A.unicode))),this.characterGlyphs=this.loadCharacterGlyphs(),this.maxGlyphDimensions=this.getMaxGlyphDimensions(this.fontSize),this.createTexture(this.fontSize)}loadCharacterGlyphs(){let A=Object.values(this.font.font.glyphs.glyphs).filter((A=>void 0!==A.unicode));return A.forEach(((A,e)=>{A.r=e%256,A.g=Math.floor(e/256)%256,A.b=Math.floor(e/65536)})),A}getMaxGlyphDimensions(A){return this.characterGlyphs.reduce(((e,t)=>{const r=t.getPath(0,0,A).getBoundingBox();return{width:Math.ceil(Math.max(e.width,r.x2-r.x1)),height:Math.ceil(Math.max(e.height,r.y2-r.y1))}}),{width:0,height:0})}setFontObject(A){this.font=A,this.characters=Object.values(this.font.font.glyphs.glyphs).filter((A=>void 0!==A.unicode)).map((A=>String.fromCharCode(A.unicode))),this.characterGlyphs=this.loadCharacterGlyphs(),this.maxGlyphDimensions=this.getMaxGlyphDimensions(this.fontSize),this.createTexture(this.fontSize)}setFontSize(A){this.fontSize=A,this.maxGlyphDimensions=this.getMaxGlyphDimensions(this.fontSize),this.createTexture(this.fontSize)}createTexture(A){this.charsetCols=Math.ceil(Math.sqrt(this.characters.length)),this.charsetRows=Math.ceil(this.characters.length/this.charsetCols);let e=this.getMaxGlyphDimensions(A);this.texture?this.texture.resize(e.width*this.charsetCols,e.height*this.charsetRows):this.texture=this.p5Instance.createFramebuffer({width:e.width*this.charsetCols,height:e.height*this.charsetRows,depthFormat:this.p5Instance.UNSIGNED_INT,textureFiltering:this.p5Instance.NEAREST}),this.texture.begin(),this.p5Instance.clear(),this.drawCharacters(A,e),this.texture.end()}drawCharacters(A,e){this.p5Instance.clear(),this.p5Instance.textFont(this.font),this.p5Instance.fill(255),this.p5Instance.textSize(A),this.p5Instance.textAlign(this.p5Instance.LEFT,this.p5Instance.TOP),this.p5Instance.noStroke();for(let A=0;A<this.characterGlyphs.length;A++){const t=A%this.charsetCols,r=Math.floor(A/this.charsetCols),i=e.width*t-e.width*this.charsetCols/2,s=e.height*r-e.height*this.charsetRows/2;this.p5Instance.text(String.fromCharCode(this.characterGlyphs[A].unicode),i,s)}}getCharsetColorArray(A){return(Array.isArray(A)?A:Array.from(A)).map((A=>{const t=this.characterGlyphs.find((e=>e.unicodes.includes(A.codePointAt(0))));if(!t)throw new e(`Could not find character in character set: ${A}`);return[t.r,t.g,t.b]}))}getUnsupportedCharacters(A){return Array.from(new Set(Array.from(A).filter((A=>!this.characterGlyphs.some((e=>e.unicodes.includes(A.codePointAt(0))))))))}}class r{p;cellWidth;cellHeight;cols=0;rows=0;width=0;height=0;offsetX=0;offsetY=0;constructor(A,e,t){this.p=A,this.cellWidth=e,this.cellHeight=t,this.reset()}reset(){const[A,e]=this._calculateGridCellDimensions();this.cols=A,this.rows=e,this._resizeGrid()}_resizeGrid(){this.width=this.cols*this.cellWidth,this.height=this.rows*this.cellHeight,this.offsetX=Math.floor((this.p.width-this.width)/2),this.offsetY=Math.floor((this.p.height-this.height)/2)}_calculateGridCellDimensions(){return[Math.floor(this.p.width/this.cellWidth),Math.floor(this.p.height/this.cellHeight)]}resizeCellPixelDimensions(A,e){this.cellWidth=A,this.cellHeight=e,this.reset()}resizeCellDimensions(A,e){const[t,r]=this._calculateGridCellDimensions();if(A>t||e>r)return console.warn(`The defined grid dimensions exceed the maximum dimensions of the grid. The maximum dimensions for the given font(size) and sketch dimensions are ${t} x ${r}. Resetting to default dimensions.`),void this.reset();this.cols=A,this.rows=e,this._resizeGrid()}}class i{eventListeners;constructor(){this.eventListeners=new Map}emit(A,e){(this.eventListeners.get(A)||[]).forEach((A=>A(e)))}on(A,e){this.eventListeners.has(A)||this.eventListeners.set(A,[]),this.eventListeners.get(A)?.push(e)}off(A,e){if(!this.eventListeners.has(A))return;const t=this.eventListeners.get(A);t&&this.eventListeners.set(A,t.filter((A=>A!==e)))}}const s=1,o=128;class n{constructor(A,e,t,r){if(new.target===n)throw new TypeError("Cannot construct AsciiRenderer instances directly");this.p=A,this.grid=e,this.characterSet=t,this.options=r,this.primaryColorSampleFramebuffer=this.p.createFramebuffer({density:1,antialias:!1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.secondaryColorSampleFramebuffer=this.p.createFramebuffer({density:1,antialias:!1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.asciiCharacterFramebuffer=this.p.createFramebuffer({density:1,antialias:!1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.outputFramebuffer=this.p.createFramebuffer({depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST})}resizeFramebuffers(){this.primaryColorSampleFramebuffer.resize(this.grid.cols,this.grid.rows),this.secondaryColorSampleFramebuffer.resize(this.grid.cols,this.grid.rows),this.asciiCharacterFramebuffer.resize(this.grid.cols,this.grid.rows)}resetShaders(){}updateOptions(A){!function(A,t){if(t?.characterColor&&(t.characterColor=A.color(t.characterColor)),t?.backgroundColor&&(t.backgroundColor=A.color(t.backgroundColor)),t?.fontSize&&(t.fontSize<s||t.fontSize>o))throw new e(`Font size ${t.fontSize} is out of bounds. It should be between ${s} and ${o}.`)}(this.p,A),this.options={...this.options,...A},this.p._setupDone&&A?.characters&&(this.characterSet.setCharacterSet(A.characters),this.resetShaders())}render(A){throw new Error("Must implement render method")}getOutputFramebuffer(){return this.outputFramebuffer}}var a="precision mediump float;\n#define GLSLIFY 1\nattribute vec3 aPosition;attribute vec2 aTexCoord;varying vec2 v_texCoord;void main(){vec4 positionVec4=vec4(aPosition,1.0);positionVec4.xy=positionVec4.xy*2.0-1.0;gl_Position=positionVec4;v_texCoord=aTexCoord;}",g="precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_characterTexture;uniform vec2 u_charsetDimensions;uniform sampler2D u_primaryColorTexture;uniform sampler2D u_secondaryColorTexture;uniform sampler2D u_asciiCharacterTexture;uniform vec2 u_gridCellDimensions;uniform vec2 u_gridPixelDimensions;uniform vec2 u_gridOffsetDimensions;uniform float u_rotationAngle;uniform int u_invertMode;uniform vec2 u_resolution;uniform float u_pixelRatio;uniform sampler2D u_prevAsciiTexture;uniform sampler2D u_gradientReferenceTexture;uniform sampler2D u_edgesTexture;uniform int u_layer;mat2 rotate2D(float angle){float s=sin(angle);float c=cos(angle);return mat2(c,-s,s,c);}void main(){vec2 logicalFragCoord=gl_FragCoord.xy/u_pixelRatio;vec2 adjustedCoord=(logicalFragCoord-u_gridOffsetDimensions)/u_gridPixelDimensions;vec2 gridCoord=adjustedCoord*u_gridCellDimensions;vec2 cellCoord=floor(gridCoord);vec2 charIndexTexCoord=(cellCoord+vec2(0.5))/u_gridCellDimensions;vec4 secondaryColor=texture2D(u_secondaryColorTexture,charIndexTexCoord);if(adjustedCoord.x<0.0||adjustedCoord.x>1.0||adjustedCoord.y<0.0||adjustedCoord.y>1.0){gl_FragColor=vec4(0);return;}vec4 primaryColor=texture2D(u_primaryColorTexture,charIndexTexCoord);if(u_layer==2){vec4 encodedIndexVec=texture2D(u_asciiCharacterTexture,charIndexTexCoord);vec4 gradientReferenceColor=texture2D(u_gradientReferenceTexture,charIndexTexCoord);if(encodedIndexVec.rgb==gradientReferenceColor.rgb){gl_FragColor=texture2D(u_prevAsciiTexture,logicalFragCoord/u_resolution);return;}}else if(u_layer==3){vec4 edgeColor=texture2D(u_edgesTexture,charIndexTexCoord);if(edgeColor.rgb==vec3(0.0)){gl_FragColor=texture2D(u_prevAsciiTexture,logicalFragCoord/u_resolution);return;}}else if(u_layer==4){vec4 encodedIndexVec=texture2D(u_asciiCharacterTexture,charIndexTexCoord);if(encodedIndexVec.rgba==vec4(0.0)){gl_FragColor=texture2D(u_prevAsciiTexture,logicalFragCoord/u_resolution);return;}}vec4 encodedIndexVec=texture2D(u_asciiCharacterTexture,charIndexTexCoord);int charIndex=int(encodedIndexVec.r*255.0+0.5)+int(encodedIndexVec.g*255.0+0.5)*256;int charCol=charIndex-(charIndex/int(u_charsetDimensions.x))*int(u_charsetDimensions.x);int charRow=charIndex/int(u_charsetDimensions.x);vec2 charCoord=vec2(float(charCol)/u_charsetDimensions.x,float(charRow)/u_charsetDimensions.y);vec2 fractionalPart=fract(gridCoord)-0.5;fractionalPart=rotate2D(u_rotationAngle)*fractionalPart;fractionalPart+=0.5;vec2 cellMin=charCoord;vec2 cellMax=charCoord+vec2(1.0/u_charsetDimensions.x,1.0/u_charsetDimensions.y);vec2 texCoord=charCoord+fractionalPart*vec2(1.0/u_charsetDimensions.x,1.0/u_charsetDimensions.y);bool outsideBounds=any(lessThan(texCoord,cellMin))||any(greaterThan(texCoord,cellMax));vec4 charColor=outsideBounds ? secondaryColor : texture2D(u_characterTexture,texCoord);if(u_invertMode==1){charColor.a=1.0-charColor.a;charColor.rgb=vec3(1.0);}vec4 finalColor=vec4(primaryColor.rgb*charColor.rgb,charColor.a);gl_FragColor=mix(secondaryColor,finalColor,charColor.a);if(outsideBounds){gl_FragColor=u_invertMode==1 ? primaryColor : secondaryColor;}}";class h extends n{constructor(A,e,t,r){super(A,e,t,r),this.colorSampleShader=this.p.createShader(a,"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_sketchTexture;uniform vec2 u_gridCellDimensions;void main(){vec2 logicalFragCoord=gl_FragCoord.xy;vec2 cellCoord=floor(logicalFragCoord);vec2 cellSizeInTexCoords=1.0/u_gridCellDimensions;vec2 cellCenterTexCoord=(cellCoord+vec2(0.5))*cellSizeInTexCoords;vec4 sampledColor=texture2D(u_sketchTexture,cellCenterTexCoord);gl_FragColor=sampledColor;}"),this.asciiCharacterShader=this.p.createShader(a,"#version 100\nprecision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_colorSampleFramebuffer;uniform sampler2D u_charPaletteTexture;uniform vec2 u_charPaletteSize;uniform vec2 u_textureSize;void main(){vec2 pos=(floor(gl_FragCoord.xy)+0.5)/u_textureSize;float brightness=dot(texture2D(u_colorSampleFramebuffer,pos).rgb,vec3(0.299,0.587,0.114));float index=clamp(floor(brightness*u_charPaletteSize.x),0.0,u_charPaletteSize.x-1.0);gl_FragColor=vec4(texture2D(u_charPaletteTexture,vec2((index+0.5)/u_charPaletteSize.x,0.0)).rgb,1.0);}"),this.shader=this.p.createShader(a,g),this.colorSampleFramebuffer=this.p.createFramebuffer({density:1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST})}resizeFramebuffers(){super.resizeFramebuffers(),this.colorSampleFramebuffer.resize(this.grid.cols,this.grid.rows)}render(A,e,t){this.colorSampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_sketchTexture",A),this.colorSampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.p.rect(0,0,this.p.width,this.p.height),this.colorSampleFramebuffer.end(),this.primaryColorSampleFramebuffer.begin(),1===this.options.characterColorMode?this.p.background(this.options.characterColor):(this.p.clear(),this.p.image(this.colorSampleFramebuffer,-this.grid.cols/2,-this.grid.rows/2,this.grid.cols,this.grid.rows)),this.primaryColorSampleFramebuffer.end(),this.secondaryColorSampleFramebuffer.begin(),1===this.options.backgroundColorMode?this.p.background(this.options.backgroundColor):(this.p.clear(),this.p.image(this.colorSampleFramebuffer,-this.grid.cols/2,-this.grid.rows/2,this.grid.cols,this.grid.rows)),this.secondaryColorSampleFramebuffer.end(),this.asciiCharacterFramebuffer.begin(),this.p.clear(),this.p.shader(this.asciiCharacterShader),this.asciiCharacterShader.setUniform("u_textureSize",[this.grid.cols,this.grid.rows]),this.asciiCharacterShader.setUniform("u_colorSampleFramebuffer",this.colorSampleFramebuffer),this.asciiCharacterShader.setUniform("u_charPaletteTexture",this.characterSet.characterColorPalette.framebuffer),this.asciiCharacterShader.setUniform("u_charPaletteSize",[this.characterSet.characterColorPalette.framebuffer.width,1]),this.p.rect(0,0,this.p.width,this.p.height),this.asciiCharacterFramebuffer.end(),this.outputFramebuffer.begin(),this.p.clear(),this.p.shader(this.shader),this.shader.setUniform("u_layer",1),this.shader.setUniform("u_pixelRatio",this.p.pixelDensity()),this.shader.setUniform("u_resolution",[this.p.width,this.p.height]),this.shader.setUniform("u_characterTexture",this.characterSet.asciiFontTextureAtlas.texture),this.shader.setUniform("u_charsetDimensions",[this.characterSet.asciiFontTextureAtlas.charsetCols,this.characterSet.asciiFontTextureAtlas.charsetRows]),this.shader.setUniform("u_primaryColorTexture",this.primaryColorSampleFramebuffer),this.shader.setUniform("u_secondaryColorTexture",this.secondaryColorSampleFramebuffer),this.shader.setUniform("u_asciiCharacterTexture",this.asciiCharacterFramebuffer),t||this.shader.setUniform("u_prevAsciiTexture",e.getOutputFramebuffer()),this.shader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.shader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.shader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.shader.setUniform("u_invertMode",this.options.invertMode),this.shader.setUniform("u_rotationAngle",this.p.radians(this.options.rotationAngle)),this.p.rect(0,0,this.p.width,this.p.height),this.outputFramebuffer.end()}}const l=A=>`\n#version 100\nprecision mediump float;\n\n// Uniforms for character texture and its grid dimensions\nuniform sampler2D u_characterTexture;\nuniform float u_charsetCols;\nuniform float u_charsetRows;\n\n// Uniforms for the sketch texture and grid configurations\nuniform sampler2D u_sketchTexture;\nuniform vec2 u_gridPixelDimensions;      // Size of the grid in logical pixels\nuniform vec2 u_gridCellDimensions;       // Number of cells in the grid (columns, rows)\n\nuniform sampler2D u_charPaletteTexture;\nuniform vec2 u_charPaletteSize;          // Width = number of characters, Height = 1\n\n// Constants\nconst float SAMPLE_SIZE = float(${A});\nconst float SAMPLE_COUNT = SAMPLE_SIZE * SAMPLE_SIZE;\n\nvoid main() {\n    // Adjust fragment coordinates to get logical pixel position\n    vec2 logicalFragCoord = floor(gl_FragCoord.xy);\n\n    // Compute the grid cell coordinate\n    vec2 cellCoord = floor(logicalFragCoord.xy);\n\n    // Compute the size of each cell in logical pixels\n    vec2 cellSizeInPixels = u_gridPixelDimensions / u_gridCellDimensions;\n\n    // Compute the cell range in texture coordinates (0 to 1)\n    vec2 cellStartTexCoord = (cellCoord * cellSizeInPixels) / u_gridPixelDimensions;\n    vec2 cellEndTexCoord = ((cellCoord + vec2(1.0)) * cellSizeInPixels) / u_gridPixelDimensions;\n    vec2 cellSizeTexCoord = cellEndTexCoord - cellStartTexCoord;\n\n    float minError = 1.0e20; // Large initial value\n    float bestCharIndex = 0.0;\n\n    // Precompute reciprocal of sample size\n    float invSampleSize = 1.0 / SAMPLE_SIZE;\n\n    // Number of palette entries (characters considered)\n    float paletteCount = u_charPaletteSize.x;\n\n    // Iterate through all characters defined by the palette texture\n    for (int i = 0; i < 1024; i++) {\n        // Break out of the loop if we exceed the palette count\n        if (float(i) >= paletteCount) {\n            break;\n        }\n\n        // Sample the character palette texture to get encoded indices\n        // Use a coordinate that reads the ith pixel from a 1D texture.\n        // The palette is assumed to be in a single row: height = 1.\n        // We sample at the center of the pixel: (i + 0.5) / paletteCount on the x-axis.\n        vec2 paletteUV = vec2((float(i) + 0.5) / paletteCount, 0.5 / u_charPaletteSize.y);\n        vec4 encoded = texture2D(u_charPaletteTexture, paletteUV);\n\n        // Decode character index from the encoded RGB channels\n        // Each channel is [0.0, 1.0], representing a byte [0, 255].\n        float R = encoded.r * 255.0;\n        float G = encoded.g * 255.0;\n        float B = encoded.b * 255.0;\n\n        float decodedCharIndex = R + G * 256.0 + B * 65536.0;\n\n        // Compute character row and column in the character atlas\n        float charRow = floor(decodedCharIndex / u_charsetCols);\n        float charCol = decodedCharIndex - u_charsetCols * charRow;\n\n        // Base texture coordinates for this character\n        vec2 charBaseCoord = vec2(charCol / u_charsetCols, charRow / u_charsetRows);\n        vec2 charSize = vec2(1.0 / u_charsetCols, 1.0 / u_charsetRows);\n\n        float error = 0.0;\n\n        // Compare the cell against this character using a grid of samples\n        for (int dy = 0; dy < ${A}; dy++) {\n            for (int dx = 0; dx < ${A}; dx++) {\n                // Compute sample offset\n                vec2 sampleOffset = vec2(float(dx) + 0.5, float(dy) + 0.5) * invSampleSize;\n\n                // Sample from sketch texture\n                vec2 sketchSampleCoord = cellStartTexCoord + sampleOffset * cellSizeTexCoord;\n                float sketchPixel = texture2D(u_sketchTexture, sketchSampleCoord).r;\n\n                // Sample from character texture\n                vec2 charSampleCoord = charBaseCoord + sampleOffset * charSize;\n                float charPixel = texture2D(u_characterTexture, charSampleCoord).r;\n\n                // Accumulate squared difference\n                float diff = sketchPixel - charPixel;\n                error += diff * diff;\n            }\n        }\n\n        // Normalize the error by the number of samples\n        error /= SAMPLE_COUNT;\n\n        // Keep track of the best matching character\n        if (error < minError) {\n            minError = error;\n            bestCharIndex = decodedCharIndex;\n        }\n    }\n\n    // Encode the bestCharIndex back into two channels (R and G) of the output\n    float lowerByte = mod(bestCharIndex, 256.0);\n    float upperByte = floor(bestCharIndex / 256.0);\n\n    float encodedR = lowerByte / 255.0;\n    float encodedG = upperByte / 255.0;\n\n    gl_FragColor = vec4(encodedR, encodedG, 0.0, 1.0);\n}\n`,B=(A,e)=>`\n#version 100\nprecision mediump float;\n\n// Uniforms\nuniform sampler2D u_inputImage;\nuniform vec2 u_inputImageSize;\nuniform int u_gridCols;\nuniform int u_gridRows;\n\n// Constants\nconst int SAMPLES_PER_ROW = ${A};\nconst int SAMPLES_PER_COL = ${e};\n\nvoid main() {\n    // Adjust fragment coordinates based on pixel ratio to get logical pixel position\n    vec2 logicalFragCoord = floor(gl_FragCoord.xy);\n    \n    // Calculate the size of each grid cell in logical pixels\n    vec2 cellSize = u_inputImageSize / vec2(float(u_gridCols), float(u_gridRows));\n\n    // Determine the current fragment's grid position in the input image\n    vec2 inputGridPos = logicalFragCoord * cellSize;\n\n    // Initialize brightness accumulator\n    float brightnessSum = 0.0;\n\n    // Total number of samples\n    float totalSamples = float(SAMPLES_PER_ROW * SAMPLES_PER_COL);\n\n    // Iterate over sample points within the grid cell\n    for(int i = 0; i < SAMPLES_PER_ROW; i++) {\n        for(int j = 0; j < SAMPLES_PER_COL; j++) {\n            // Calculate normalized texture coordinates for the sample\n            vec2 offset = (vec2(float(i), float(j)) + 0.5) * (cellSize / vec2(float(SAMPLES_PER_ROW), float(SAMPLES_PER_COL)));\n            vec2 texCoord = (inputGridPos + offset) / u_inputImageSize;\n\n            // Clamp texture coordinates to [0, 1] to prevent sampling outside the image\n            texCoord = clamp(texCoord, 0.0, 1.0);\n\n            // Sample the color from the input image\n            vec4 sampledColor = texture2D(u_inputImage, texCoord);\n\n            // Calculate brightness using luminance formula\n            float brightness = 0.299 * sampledColor.r + 0.587 * sampledColor.g + 0.114 * sampledColor.b;\n\n            // Accumulate brightness\n            brightnessSum += brightness;\n        }\n    }\n\n    // Compute average brightness\n    float averageBrightness = brightnessSum / totalSamples;\n\n    // Output the average brightness as a grayscale color with full opacity\n    gl_FragColor = vec4(vec3(averageBrightness), 1.0);\n}\n\n`,c=(A,e,t)=>`\n#version 100\nprecision mediump float;\n\n// Uniforms\nuniform sampler2D u_inputImage;        // Original input image\nuniform sampler2D u_inputImageBW;      // Black and white image\nuniform vec2 u_inputImageSize;         // Size of the input image (e.g., 800.0, 800.0)\nuniform int u_gridCols;                // Number of grid columns (e.g., 100)\nuniform int u_gridRows;                // Number of grid rows (e.g., 100)\nuniform int u_colorRank;               // Color rank (e.g., 1 or 2)\n\n// Constants\nconst int NUM_SLOTS = ${A};\nconst int SAMPLES_PER_ROW = ${e};\nconst int SAMPLES_PER_COL = ${t};\n\nvoid main() {\n    // Adjust fragment coordinates based on pixel ratio to get logical pixel position\n    vec2 logicalFragCoord = floor(gl_FragCoord.xy);\n\n    // Calculate the size of each grid cell in logical pixels\n    vec2 cellSize = u_inputImageSize / vec2(float(u_gridCols), float(u_gridRows));\n\n    // Determine the current fragment's grid position in the input image\n    vec2 inputGridPos = logicalFragCoord * cellSize;\n\n    // Calculate the center texture coordinate for saving the initial pixel color\n    vec2 centerOffset = cellSize * 0.5;\n    vec2 centerTexCoord = (inputGridPos + centerOffset) / u_inputImageSize;\n    vec4 savedColor = texture2D(u_inputImage, centerTexCoord);\n\n    // Initialize color slots and counts\n    vec4 colors[NUM_SLOTS];\n    float counts[NUM_SLOTS];\n    for(int i = 0; i < NUM_SLOTS; i++) {\n        colors[i] = vec4(0.0);\n        counts[i] = 0.0;\n    }\n\n    // Iterate over sample points within the grid cell\n    for(int i = 0; i < SAMPLES_PER_ROW; i++) {\n        for(int j = 0; j < SAMPLES_PER_COL; j++) {\n            // Calculate normalized texture coordinates for the sample\n            vec2 offset = (vec2(float(i), float(j)) + 0.5) * (cellSize / vec2(float(SAMPLES_PER_ROW), float(SAMPLES_PER_COL)));\n            vec2 texCoord = (inputGridPos + offset) / u_inputImageSize;\n\n            // Clamp texture coordinates to [0, 1] to prevent sampling outside the image\n            texCoord = clamp(texCoord, 0.0, 1.0);\n\n            // Sample the color from the input image\n            vec4 sampledColor = texture2D(u_inputImage, texCoord);\n\n            // Sample the corresponding pixel from the black and white image\n            vec4 bwColor = texture2D(u_inputImageBW, texCoord);\n            float isWhite = step(0.5, bwColor.r); // Assuming grayscale, check if red channel is >= 0.5\n\n            // Determine if the current pixel should be considered based on u_colorRank\n            bool shouldConsider = false;\n            if(u_colorRank == 1 && isWhite > 0.5) {\n                shouldConsider = true;\n            }\n            else if(u_colorRank == 2 && isWhite <= 0.5) {\n                shouldConsider = true;\n            }\n\n            // Skip this pixel if it doesn't meet the criteria\n            if(!shouldConsider) {\n                continue;\n            }\n\n            // Find a matching color slot\n            bool matched = false;\n            for(int k = 0; k < NUM_SLOTS; k++) {\n                if(sampledColor.rgb == colors[k].rgb) {\n                    counts[k] += 1.0;\n                    matched = true;\n                    break;\n                }\n            }\n\n            // Assign to a new slot if no match is found\n            if(!matched) {\n                for(int k = 0; k < NUM_SLOTS; k++) {\n                    if(counts[k] == 0.0) {\n                        colors[k] = sampledColor;\n                        counts[k] = 1.0;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    // Track the top color based on counts\n    float topCount = 0.0;\n    vec4 topColor = vec4(0.0);\n\n    for(int k = 0; k < NUM_SLOTS; k++) {\n        float currentCount = counts[k];\n        vec4 currentColor = colors[k];\n\n        if(currentCount > topCount) {\n            topCount = currentCount;\n            topColor = currentColor;\n        }\n    }\n\n    // If u_colorRank is 2 and no pixels were considered, use the savedColor instead of black\n    if(u_colorRank == 2 && topCount == 0.0) {\n        topColor = savedColor;\n    }\n\n    // Output the color with full opacity\n    gl_FragColor = vec4(topColor.rgb, 1.0);\n}\n`;class E extends n{constructor(A,e,t,r){super(A,e,t,r),this.characterSelectionShader=this.p.createShader(a,l(this.characterSet.asciiFontTextureAtlas.fontSize,this.characterSet.characters.length)),this.brightnessSampleShader=this.p.createShader(a,B(this.grid.cellHeight,this.grid.cellWidth)),this.colorSampleShader=this.p.createShader(a,c(16,this.grid.cellHeight,this.grid.cellWidth)),this.brightnessSplitShader=this.p.createShader(a,"#version 100\nprecision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_inputImage;uniform sampler2D u_brightnessTexture;uniform vec2 u_inputImageSize;uniform int u_gridCols;uniform int u_gridRows;uniform float u_pixelRatio;const float EPSILON=0.01;void main(){vec2 logicalFragCoord=floor(gl_FragCoord.xy/u_pixelRatio);float cellWidth=u_inputImageSize.x/float(u_gridCols);float cellHeight=u_inputImageSize.y/float(u_gridRows);float gridX=floor(logicalFragCoord.x/cellWidth);float gridY=floor(logicalFragCoord.y/cellHeight);gridX=clamp(gridX,0.0,float(u_gridCols-1));gridY=clamp(gridY,0.0,float(u_gridRows-1));vec2 brightnessTexCoord=(vec2(gridX,gridY)+0.5)/vec2(float(u_gridCols),float(u_gridRows));float averageBrightness=texture2D(u_brightnessTexture,brightnessTexCoord).r;vec2 imageTexCoord=logicalFragCoord/u_inputImageSize;vec4 originalColor=texture2D(u_inputImage,imageTexCoord);float fragmentBrightness=0.299*originalColor.r+0.587*originalColor.g+0.114*originalColor.b;float brightnessDifference=fragmentBrightness-averageBrightness;float finalColorValue;if(brightnessDifference<-EPSILON){finalColorValue=0.0;}else{finalColorValue=1.0;}gl_FragColor=vec4(vec3(finalColorValue),1.0);}"),this.shader=this.p.createShader(a,g),this.brightnessSampleFramebuffer=this.p.createFramebuffer({density:1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.brightnessSplitFramebuffer=this.p.createFramebuffer({depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST})}resizeFramebuffers(){super.resizeFramebuffers(),this.brightnessSampleFramebuffer.resize(this.grid.cols,this.grid.rows)}resetShaders(){this.characterSelectionShader=this.p.createShader(a,l(this.characterSet.asciiFontTextureAtlas.fontSize,this.characterSet.characters.length)),this.brightnessSampleShader=this.p.createShader(a,B(this.grid.cellHeight,this.grid.cellWidth)),this.colorSampleShader=this.p.createShader(a,c(16,this.grid.cellHeight,this.grid.cellWidth))}render(A,e,t){this.brightnessSampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.brightnessSampleShader),this.brightnessSampleShader.setUniform("u_inputImage",A),this.brightnessSampleShader.setUniform("u_inputImageSize",[this.p.width,this.p.height]),this.brightnessSampleShader.setUniform("u_gridCols",this.grid.cols),this.brightnessSampleShader.setUniform("u_gridRows",this.grid.rows),this.p.rect(0,0,this.p.width,this.p.height),this.brightnessSampleFramebuffer.end(),this.brightnessSplitFramebuffer.begin(),this.p.clear(),this.p.shader(this.brightnessSplitShader),this.brightnessSplitShader.setUniform("u_inputImage",A),this.brightnessSplitShader.setUniform("u_brightnessTexture",this.brightnessSampleFramebuffer),this.brightnessSplitShader.setUniform("u_inputImageSize",[this.p.width,this.p.height]),this.brightnessSplitShader.setUniform("u_gridCols",this.grid.cols),this.brightnessSplitShader.setUniform("u_gridRows",this.grid.rows),this.brightnessSplitShader.setUniform("u_pixelRatio",this.p.pixelDensity()),this.p.rect(0,0,this.p.width,this.p.height),this.brightnessSplitFramebuffer.end(),this.primaryColorSampleFramebuffer.begin(),1===this.options.characterColorMode?this.p.background(this.options.characterColor):(this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_inputImage",A),this.colorSampleShader.setUniform("u_inputImageBW",this.brightnessSplitFramebuffer),this.colorSampleShader.setUniform("u_inputImageSize",[this.p.width,this.p.height]),this.colorSampleShader.setUniform("u_gridCols",this.grid.cols),this.colorSampleShader.setUniform("u_gridRows",this.grid.rows),this.colorSampleShader.setUniform("u_colorRank",1),this.p.rect(0,0,this.p.width,this.p.height)),this.primaryColorSampleFramebuffer.end(),this.secondaryColorSampleFramebuffer.begin(),1===this.options.backgroundColorMode?this.p.background(this.options.backgroundColor):(this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_inputImage",A),this.colorSampleShader.setUniform("u_inputImageBW",this.brightnessSplitFramebuffer),this.colorSampleShader.setUniform("u_inputImageSize",[this.p.width,this.p.height]),this.colorSampleShader.setUniform("u_gridCols",this.grid.cols),this.colorSampleShader.setUniform("u_gridRows",this.grid.rows),this.colorSampleShader.setUniform("u_colorRank",2),this.p.rect(0,0,this.p.width,this.p.height)),this.secondaryColorSampleFramebuffer.end(),this.asciiCharacterFramebuffer.begin(),this.p.clear(),this.p.shader(this.characterSelectionShader),this.characterSelectionShader.setUniform("u_characterTexture",this.characterSet.asciiFontTextureAtlas.texture),this.characterSelectionShader.setUniform("u_charsetCols",this.characterSet.asciiFontTextureAtlas.charsetCols),this.characterSelectionShader.setUniform("u_charsetRows",this.characterSet.asciiFontTextureAtlas.charsetRows),this.characterSelectionShader.setUniform("u_charPaletteTexture",this.characterSet.characterColorPalette.framebuffer),this.characterSelectionShader.setUniform("u_charPaletteSize",[this.characterSet.characterColorPalette.framebuffer.width,1]),this.characterSelectionShader.setUniform("u_sketchTexture",this.brightnessSplitFramebuffer),this.characterSelectionShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.characterSelectionShader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.p.rect(0,0,this.p.width,this.p.height),this.asciiCharacterFramebuffer.end(),this.outputFramebuffer.begin(),this.p.clear(),this.p.shader(this.shader),this.shader.setUniform("u_layer",1),this.shader.setUniform("u_pixelRatio",this.p.pixelDensity()),this.shader.setUniform("u_resolution",[this.p.width,this.p.height]),this.shader.setUniform("u_characterTexture",this.characterSet.asciiFontTextureAtlas.texture),this.shader.setUniform("u_charsetDimensions",[this.characterSet.asciiFontTextureAtlas.charsetCols,this.characterSet.asciiFontTextureAtlas.charsetRows]),this.shader.setUniform("u_primaryColorTexture",this.primaryColorSampleFramebuffer),this.shader.setUniform("u_secondaryColorTexture",this.secondaryColorSampleFramebuffer),this.shader.setUniform("u_asciiCharacterTexture",this.asciiCharacterFramebuffer),t||this.shader.setUniform("u_prevAsciiTexture",e.getOutputFramebuffer()),this.shader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.shader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.shader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.shader.setUniform("u_invertMode",this.options.invertMode),this.shader.setUniform("u_rotationAngle",this.p.radians(this.options.rotationAngle)),this.p.rect(0,0,this.p.width,this.p.height),this.outputFramebuffer.end()}}class Q extends n{constructor(A,e,t,r){super(A,e,t,r),this.shader=this.p.createShader(a,g)}render(A,e,t){this.outputFramebuffer.begin(),this.p.clear(),this.p.shader(this.shader),this.shader.setUniform("u_layer",4),this.shader.setUniform("u_pixelRatio",this.p.pixelDensity()),this.shader.setUniform("u_resolution",[this.p.width,this.p.height]),this.shader.setUniform("u_characterTexture",this.characterSet.asciiFontTextureAtlas.texture),this.shader.setUniform("u_charsetDimensions",[this.characterSet.asciiFontTextureAtlas.charsetCols,this.characterSet.asciiFontTextureAtlas.charsetRows]),this.shader.setUniform("u_primaryColorTexture",this.primaryColorSampleFramebuffer),t||this.shader.setUniform("u_prevAsciiTexture",e.getOutputFramebuffer()),this.shader.setUniform("u_secondaryColorTexture",this.secondaryColorSampleFramebuffer),this.shader.setUniform("u_asciiCharacterTexture",this.asciiCharacterFramebuffer),this.shader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.shader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.shader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.shader.setUniform("u_invertMode",0),this.shader.setUniform("u_rotationAngle",0),this.p.rect(0,0,this.p.width,this.p.height),this.outputFramebuffer.end()}}const d=(A,e,t)=>`\n#version 100\nprecision mediump float;\n\n// Uniforms\nuniform sampler2D u_image;\nuniform vec2 u_imageSize;             // Size of the input image in logical pixels (width, height)\nuniform vec2 u_gridCellDimensions;    // Number of cells in the grid (columns, rows)\nuniform int u_threshold;              // Threshold for non-black pixel count\n\n// Constants\nconst vec3 BLACK = vec3(0.0, 0.0, 0.0);\nconst int MAX_HISTOGRAM_SIZE = ${A};\nconst int SAMPLES_PER_ROW = ${e};\nconst int SAMPLES_PER_COL = ${t};\n\n// Histograms\nvec3 colorHistogram[MAX_HISTOGRAM_SIZE];\nint countHistogram[MAX_HISTOGRAM_SIZE];\n\n// Utility function for rounding\nfloat roundFloat(float value) {\n    return floor(value + 0.5);\n}\n\nvoid main() {\n    // Adjust fragment coordinates based on pixel ratio to get logical pixel position\n    vec2 logicalFragCoord = floor(gl_FragCoord.xy);\n    \n    // Retrieve grid cell indices\n    ivec2 coords = ivec2(logicalFragCoord);\n    int gridX = coords.x;\n    int gridY = coords.y;\n\n    // Compute the size of each grid cell in logical pixels\n    vec2 cellSizeInPixels = u_imageSize / u_gridCellDimensions;\n\n    // Calculate the origin of the cell in the image\n    ivec2 cellOrigin = ivec2(roundFloat(float(gridX) * cellSizeInPixels.x), roundFloat(float(gridY) * cellSizeInPixels.y));\n    int nonBlackCount = 0;\n\n    // Initialize histograms\n    for (int i = 0; i < MAX_HISTOGRAM_SIZE; i++) {\n        colorHistogram[i] = BLACK;\n        countHistogram[i] = 0;\n    }\n\n    // Iterate over the cell and populate the histograms\n    for (int i = 0; i < SAMPLES_PER_COL; i++) {\n        for (int j = 0; j < SAMPLES_PER_ROW; j++) {\n            ivec2 pixelCoords = cellOrigin + ivec2(j, i); // Note: j corresponds to x, i to y\n            \n            // Check bounds\n            if (pixelCoords.x < 0 || pixelCoords.y < 0 || \n                pixelCoords.x >= int(u_imageSize.x) || pixelCoords.y >= int(u_imageSize.y)) {\n                continue;\n            }\n            \n            // Normalize pixel coordinates for texture sampling\n            vec2 normalizedCoords = (vec2(pixelCoords) + 0.5) / u_imageSize; // +0.5 for pixel center\n            vec3 color = texture2D(u_image, normalizedCoords).rgb;\n\n            // Ignore black pixels\n            if (distance(color, BLACK) < 0.001) { // Using epsilon for comparison\n                continue;\n            }\n\n            nonBlackCount++;\n\n            // Check if the color already exists in the histogram\n            bool found = false;\n            for (int k = 0; k < MAX_HISTOGRAM_SIZE; k++) {\n                if (distance(color, colorHistogram[k]) < 0.001) { // Using epsilon for comparison\n                    countHistogram[k]++;\n                    found = true;\n                    break;\n                }\n            }\n\n            // If the color was not found, add it to the histogram at the first available slot\n            if (!found) {\n                for (int m = 0; m < MAX_HISTOGRAM_SIZE; m++) {\n                    if (countHistogram[m] == 0) {\n                        colorHistogram[m] = color;\n                        countHistogram[m] = 1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    vec3 mostFrequentColor = BLACK;\n    int highestCount = 0;\n\n    // Find the most frequent color\n    for (int k = 0; k < MAX_HISTOGRAM_SIZE; k++) {\n        if (countHistogram[k] > highestCount) {\n            mostFrequentColor = colorHistogram[k];\n            highestCount = countHistogram[k];\n        }\n    }\n\n    // If the number of non-black pixels is below the threshold, output black; otherwise, output the most frequent color\n    if (nonBlackCount < u_threshold) {\n        gl_FragColor = vec4(BLACK, 1.0);\n    } else {\n        gl_FragColor = vec4(mostFrequentColor, 1.0);\n    }\n}\n\n`;class u extends n{constructor(A,e,t,r){super(A,e,t,r),this.options.characterColor=this.p.color(this.options.characterColor),this.options.backgroundColor=this.p.color(this.options.backgroundColor),this.sobelShader=this.p.createShader(a,"precision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D u_texture;uniform vec2 u_textureSize;uniform float u_threshold;void main(){vec2 texelSize=1.0/u_textureSize;float kernelX[9];float kernelY[9];kernelX[0]=-1.0;kernelX[1]=0.0;kernelX[2]=1.0;kernelX[3]=-2.0;kernelX[4]=0.0;kernelX[5]=2.0;kernelX[6]=-1.0;kernelX[7]=0.0;kernelX[8]=1.0;kernelY[0]=-1.0;kernelY[1]=-2.0;kernelY[2]=-1.0;kernelY[3]=0.0;kernelY[4]=0.0;kernelY[5]=0.0;kernelY[6]=1.0;kernelY[7]=2.0;kernelY[8]=1.0;vec3 texColor[9];for(int i=0;i<3;i++){for(int j=0;j<3;j++){texColor[i*3+j]=texture2D(u_texture,v_texCoord+vec2(float(i-1),float(j-1))*texelSize).rgb;}}vec3 sobelX=vec3(0.0);vec3 sobelY=vec3(0.0);for(int i=0;i<9;i++){sobelX+=kernelX[i]*texColor[i];sobelY+=kernelY[i]*texColor[i];}vec3 sobel=sqrt(sobelX*sobelX+sobelY*sobelY);float intensity=length(sobel)/sqrt(3.0);float angleDeg=degrees(atan(sobelY.r,sobelX.r));vec3 edgeColor=vec3(0.0);if(intensity>u_threshold){if(angleDeg>=-22.5&&angleDeg<22.5){edgeColor=vec3(0.1);}else if(angleDeg>=22.5&&angleDeg<67.5){edgeColor=vec3(0.2);}else if(angleDeg>=67.5&&angleDeg<112.5){edgeColor=vec3(0.3);}else if(angleDeg>=112.5&&angleDeg<157.5){edgeColor=vec3(0.4);}else if(angleDeg>=157.5||angleDeg<-157.5){edgeColor=vec3(0.6);}else if(angleDeg>=-157.5&&angleDeg<-112.5){edgeColor=vec3(0.7);}else if(angleDeg>=-112.5&&angleDeg<-67.5){edgeColor=vec3(0.8);}else if(angleDeg>=-67.5&&angleDeg<-22.5){edgeColor=vec3(0.9);}}gl_FragColor=vec4(edgeColor,1.0);}"),this.sampleShader=this.p.createShader(a,d(16,this.grid.cellHeight,this.grid.cellWidth)),this.colorSampleShader=this.p.createShader(a,"#version 100\nprecision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_sketchTexture;uniform bool u_previousRendererEnabled;uniform sampler2D u_previousColorTexture;uniform sampler2D u_sampleTexture;uniform vec2 u_gridCellDimensions;uniform int u_sampleMode;uniform vec4 u_staticColor;void main(){vec2 cellCoord=floor(gl_FragCoord.xy);vec2 cellSizeInTexCoords=vec2(1.0)/u_gridCellDimensions;vec2 cellCenterTexCoord=(cellCoord+vec2(0.5))*cellSizeInTexCoords;bool isBlackSample=texture2D(u_sampleTexture,cellCenterTexCoord)==vec4(vec3(0.0),1.0);if(isBlackSample&&u_previousRendererEnabled){gl_FragColor=texture2D(u_previousColorTexture,cellCenterTexCoord);}else if(u_sampleMode==0){gl_FragColor=texture2D(u_sketchTexture,cellCenterTexCoord);}else{gl_FragColor=u_staticColor;}}"),this.asciiCharacterShader=this.p.createShader(a,"#version 100\nprecision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_sketchTexture;uniform sampler2D u_colorPaletteTexture;uniform sampler2D u_previousAsciiCharacterTexture;uniform vec2 u_gridCellDimensions;uniform int u_totalChars;void main(){vec2 cellCoord=floor(gl_FragCoord.xy);vec2 cellSizeInTexCoords=vec2(1.0)/u_gridCellDimensions;vec2 cellCenterTexCoord=(cellCoord+vec2(0.5))*cellSizeInTexCoords;if(texture2D(u_sketchTexture,cellCenterTexCoord)==vec4(vec3(0.0),1.0)){gl_FragColor=texture2D(u_previousAsciiCharacterTexture,cellCenterTexCoord);return;}vec4 sketchColor=texture2D(u_sketchTexture,cellCenterTexCoord);float brightness=dot(sketchColor.rgb,vec3(0.299,0.587,0.114));int charIndex=int(brightness*float(u_totalChars));if(charIndex>u_totalChars-1){charIndex=u_totalChars-1;}float paletteCoord=(float(charIndex)+0.5)/float(u_totalChars);gl_FragColor=texture2D(u_colorPaletteTexture,vec2(paletteCoord,0.5));}"),this.shader=this.p.createShader(a,g),this.sobelFramebuffer=this.p.createFramebuffer({depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.sampleFramebuffer=this.p.createFramebuffer({density:1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST})}resizeFramebuffers(){super.resizeFramebuffers(),this.sampleFramebuffer.resize(this.grid.cols,this.grid.rows)}resetShaders(){this.sampleShader=this.p.createShader(a,d(16,this.grid.cellHeight,this.grid.cellWidth))}render(A,e,t){this.sobelFramebuffer.begin(),this.p.clear(),this.p.shader(this.sobelShader),this.sobelShader.setUniform("u_texture",A),this.sobelShader.setUniform("u_textureSize",[this.p.width,this.p.height]),this.sobelShader.setUniform("u_threshold",this.options.sobelThreshold),this.p.rect(0,0,this.p.width,this.p.height),this.sobelFramebuffer.end(),this.sampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.sampleShader),this.sampleShader.setUniform("u_imageSize",[this.p.width,this.p.height]),this.sampleShader.setUniform("u_image",this.sobelFramebuffer),this.sampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.sampleShader.setUniform("u_threshold",this.options.sampleThreshold),this.p.rect(0,0,this.p.width,this.p.height),this.sampleFramebuffer.end(),this.primaryColorSampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_sketchTexture",A),this.colorSampleShader.setUniform("u_previousRendererEnabled",e.options.enabled),this.colorSampleShader.setUniform("u_previousColorTexture",e.primaryColorSampleFramebuffer),this.colorSampleShader.setUniform("u_sampleTexture",this.sampleFramebuffer),this.colorSampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.colorSampleShader.setUniform("u_sampleMode",this.options.characterColorMode),this.colorSampleShader.setUniform("u_staticColor",this.options.characterColor._array),this.p.rect(0,0,this.p.width,this.p.height),this.primaryColorSampleFramebuffer.end(),this.secondaryColorSampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_sketchTexture",A),this.colorSampleShader.setUniform("u_previousRendererEnabled",e.options.enabled),this.colorSampleShader.setUniform("u_previousColorTexture",e.secondaryColorSampleFramebuffer),this.colorSampleShader.setUniform("u_sampleTexture",this.sampleFramebuffer),this.colorSampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.colorSampleShader.setUniform("u_sampleMode",this.options.backgroundColorMode),this.colorSampleShader.setUniform("u_staticColor",this.options.backgroundColor._array),this.p.rect(0,0,this.p.width,this.p.height),this.secondaryColorSampleFramebuffer.end(),this.asciiCharacterFramebuffer.begin(),this.p.clear(),this.p.shader(this.asciiCharacterShader),this.asciiCharacterShader.setUniform("u_sketchTexture",this.sampleFramebuffer),this.asciiCharacterShader.setUniform("u_colorPaletteTexture",this.characterSet.characterColorPalette.framebuffer),this.asciiCharacterShader.setUniform("u_previousAsciiCharacterTexture",e.asciiCharacterFramebuffer),this.asciiCharacterShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.asciiCharacterShader.setUniform("u_totalChars",this.characterSet.characters.length),this.p.rect(0,0,this.p.width,this.p.height),this.asciiCharacterFramebuffer.end(),this.outputFramebuffer.begin(),this.p.clear(),this.p.shader(this.shader),this.shader.setUniform("u_layer",3),this.shader.setUniform("u_pixelRatio",this.p.pixelDensity()),this.shader.setUniform("u_resolution",[this.p.width,this.p.height]),this.shader.setUniform("u_characterTexture",this.characterSet.asciiFontTextureAtlas.texture),this.shader.setUniform("u_charsetDimensions",[this.characterSet.asciiFontTextureAtlas.charsetCols,this.characterSet.asciiFontTextureAtlas.charsetRows]),t||this.shader.setUniform("u_prevAsciiTexture",e.getOutputFramebuffer()),this.shader.setUniform("u_primaryColorTexture",this.primaryColorSampleFramebuffer),this.shader.setUniform("u_secondaryColorTexture",this.secondaryColorSampleFramebuffer),this.shader.setUniform("u_asciiCharacterTexture",this.asciiCharacterFramebuffer),this.shader.setUniform("u_edgesTexture",this.sampleFramebuffer),this.shader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.shader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.shader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.shader.setUniform("u_invertMode",this.options.invertMode),this.shader.setUniform("u_rotationAngle",this.p.radians(this.options.rotationAngle)),this.p.rect(0,0,this.p.width,this.p.height),this.outputFramebuffer.end()}}class C{constructor(A,e,t,r,i,s){this.p5=A,this.asciiFontTextureAtlas=e,this.grid=t,this.options=s,this.fontBase64=r,this.fontFileType=i,this.updateColors(),this.initFontFace(),this.initMainContainer(),this.initAsciiArtContainer(),this.initCharacterGrids()}initFontFace(){const A=document.createElement("style");A.textContent=`\n            @font-face {\n                font-family: 'AsciiFont';\n                src: url(${this.fontBase64}) format('${this.fontFileType}');\n                font-weight: normal;\n                font-style: normal;\n            }\n        `,document.head.appendChild(A),this.styleEl=A}initMainContainer(){this.textAsciiRenderer=this.p5.createDiv(""),this.textAsciiRenderer.style("position","absolute"),this.textAsciiRenderer.style("top","0"),this.textAsciiRenderer.style("left","0"),this.textAsciiRenderer.style("width","100%"),this.textAsciiRenderer.style("height","100%"),this.textAsciiRenderer.style("font-family","'AsciiFont', monospace"),this.textAsciiRenderer.style("font-size",`${this.asciiFontTextureAtlas.fontSize}px`),this.textAsciiRenderer.style("line-height","1"),this.textAsciiRenderer.style("display","flex"),this.textAsciiRenderer.style("justify-content","center"),this.textAsciiRenderer.style("align-items","center"),this.textAsciiRenderer.style("white-space","pre"),this.textAsciiRenderer.style("background-color",this.backgroundColor),this.textAsciiRenderer.style("color",this.foregroundColor),this.options.enabled||this.textAsciiRenderer.hide()}initAsciiArtContainer(){const A=this.p5.createDiv("");A.class("ascii-art-container"),A.parent(this.textAsciiRenderer),this.asciiArtContainer=A}initCharacterGrids(){this.initializeLineDivs(),this.initializeCharSpans(),this.initializePreviousColors()}updateFont(A,e){this.fontBase64=A,this.fontFileType=e;const t="AsciiFont";this.styleEl.textContent=`\n            @font-face {\n                font-family: '${t}';\n                src: url(${this.fontBase64}) format('${this.fontFileType}');\n                font-weight: normal;\n                font-style: normal;\n            }\n        `,this.textAsciiRenderer.style("font-family",`'${t}', monospace`)}updateColors(){this.backgroundColor=this.options.invertMode?this.options.characterColor:this.options.backgroundColor,this.foregroundColor=this.options.invertMode?this.options.backgroundColor:this.options.characterColor,this.textAsciiRenderer&&(this.textAsciiRenderer.style("background-color",this.backgroundColor),this.textAsciiRenderer.style("color",this.foregroundColor))}updateFontSize(){this.textAsciiRenderer.style("font-size",`${this.asciiFontTextureAtlas.fontSize}px`),this.updateDimensions()}updateInvertMode(){this.updateColors(),this.applyContainerStyles(),0!==this.options.characterColorMode&&0!==this.options.backgroundColorMode&&this.clearPerCharacterStyles()}applyContainerStyles(){this.textAsciiRenderer.style("background-color",this.backgroundColor),this.textAsciiRenderer.style("color",this.foregroundColor)}updateOptions(A){this.options={...this.options,...A}}updateCharacterColor(){this.updateColors(),this.applyContainerStyles(),0!==this.options.characterColorMode&&this.clearPerCharacterStyles()}updateBackgroundColor(){this.updateColors(),this.applyContainerStyles(),0!==this.options.characterColorMode&&this.clearPerCharacterStyles()}updateCharacterColorMode(){0!==this.options.characterColorMode&&this.clearPerCharacterStyles()}initializeLineDivs(){this.lineDivs=[],this.asciiArtContainer.html("");for(let A=0;A<this.grid.rows;A++){const A=document.createElement("div");A.style.margin="0",A.style.padding="0",A.style.lineHeight="1",A.style.fontFamily="inherit",A.style.fontSize="inherit",this.lineDivs.push(A),this.asciiArtContainer.elt.appendChild(A)}}initializeCharSpans(){this.charSpans=[];for(let A=0;A<this.grid.rows;A++){const e=[],t=this.lineDivs[A];t.innerHTML="";for(let A=0;A<this.grid.cols;A++){const A=document.createElement("span");A.textContent=" ",t.appendChild(A),e.push(A)}this.charSpans.push(e)}}initializePreviousColors(){const A=this.grid.cols,e=this.grid.rows;this.previousTexts=Array.from({length:e},(()=>Array(A).fill(null))),this.previousColors=Array.from({length:e},(()=>Array(A).fill(null))),this.previousBgColors=Array.from({length:e},(()=>Array(A).fill(null)))}outputAsciiToHtml(A){A.asciiCharacterFramebuffer.loadPixels();const e=A.asciiCharacterFramebuffer.pixels,t=this.getPixelsIfModeEnabled(this.options.characterColorMode,A.primaryColorSampleFramebuffer),r=this.getPixelsIfModeEnabled(this.options.backgroundColorMode,A.secondaryColorSampleFramebuffer);let i=0;for(let A=0;A<this.grid.rows;A++){const s=this.charSpans[A];for(let o=0;o<this.grid.cols;o++){const n=4*i,a=this.getCharacterFromPixels(e,n),g=s[o];this.updateCharSpanContent(o,A,a,g),0===this.options.characterColorMode&&t?this.applyPrimaryColorMode(g,o,A,t,n):this.resetIfNotPrimaryMode(o,A,g),0===this.options.backgroundColorMode&&r?this.applySecondaryColorMode(g,o,A,r,n):this.resetIfNotSecondaryMode(o,A,g),this.applyDefaultColorIfNeeded(o,A,g),i++}}}getPixelsIfModeEnabled(A,e){return 0===A?(e.loadPixels(),e.pixels):null}getCharacterFromPixels(A,e){const t=this.asciiFontTextureAtlas.characters;let r=A[e]+(A[e+1]<<8);return r>=t.length&&(r=t.length-1),t[r]}updateCharSpanContent(A,e,t,r){this.previousTexts[e][A]!==t&&(r.textContent=t,this.previousTexts[e][A]=t)}applyPrimaryColorMode(A,e,t,r,i){const s=this.rgbFromPixels(r,i);this.options.invertMode?(this.updateBackgroundColorForCharSpan(e,t,A,s),this.updateTextColorForCharSpan(e,t,A,this.foregroundColor)):(this.updateTextColorForCharSpan(e,t,A,s),this.clearBackgroundColorForCharSpan(e,t,A))}applySecondaryColorMode(A,e,t,r,i){const s=this.rgbFromPixels(r,i);this.options.invertMode?(this.updateTextColorForCharSpan(e,t,A,s),this.clearBackgroundColorForCharSpan(e,t,A)):this.updateBackgroundColorForCharSpan(e,t,A,s)}applyDefaultColorIfNeeded(A,e,t){0!==this.options.characterColorMode&&this.previousColors[e][A]!==this.foregroundColor&&this.updateTextColorForCharSpan(A,e,t,this.foregroundColor)}resetIfNotPrimaryMode(A,e,t){0!==this.options.characterColorMode&&null!==this.previousColors[e][A]&&this.updateTextColorForCharSpan(A,e,t,this.foregroundColor)}resetIfNotSecondaryMode(A,e,t){0!==this.options.backgroundColorMode&&null!==this.previousBgColors[e][A]&&this.clearBackgroundColorForCharSpan(A,e,t)}clearPerCharacterStyles(){for(let A=0;A<this.grid.rows;A++)for(let e=0;e<this.grid.cols;e++){const t=this.charSpans[A][e];this.resetCharSpanColors(e,A,t)}}rgbFromPixels(A,e){return`rgb(${A[e]}, ${A[e+1]}, ${A[e+2]})`}updateTextColorForCharSpan(A,e,t,r){this.previousColors[e][A]!==r&&(t.style.color=r,this.previousColors[e][A]=r)}updateBackgroundColorForCharSpan(A,e,t,r){this.previousBgColors[e][A]!==r&&(t.style.backgroundColor=r,this.previousBgColors[e][A]=r)}clearBackgroundColorForCharSpan(A,e,t){null!==this.previousBgColors[e][A]&&(t.style.backgroundColor="",this.previousBgColors[e][A]=null)}resetCharSpanColors(A,e,t){null!==this.previousColors[e][A]&&(t.style.color="",this.previousColors[e][A]=null),null!==this.previousBgColors[e][A]&&(t.style.backgroundColor="",this.previousBgColors[e][A]=null)}updateDimensions(){this.initializeLineDivs(),this.initializeCharSpans(),this.initializePreviousColors()}toggleVisibility(){this.options.enabled?this.textAsciiRenderer.style("display","flex"):this.textAsciiRenderer.hide()}}const f={enabled:!0,characters:"0123456789",characterColor:"#FFFFFF",characterColorMode:0,backgroundColor:"#000000",backgroundColorMode:1,invertMode:!1,rotationAngle:0},p={enabled:!1,characters:"0123456789",characterColor:"#FFFFFF",characterColorMode:0,backgroundColor:"#000000",backgroundColorMode:1,invertMode:!1,rotationAngle:0},m={enabled:!1,characterColor:"#FFFFFF",characterColorMode:0,backgroundColor:"#000000",backgroundColorMode:1,invertMode:!1,rotationAngle:0},D={enabled:!1,characters:"-/|\\-/|\\",characterColor:"#FFFFFF",characterColorMode:0,backgroundColor:"#000000",backgroundColorMode:1,invertMode:!1,sobelThreshold:.5,sampleThreshold:16,rotationAngle:0},P={enabled:!1},I={enabled:!1,characterColor:"#FFFFFF",characterColorMode:0,backgroundColor:"#000000",backgroundColorMode:1,invertMode:!1};class x{colors;framebuffer;p5Instance;constructor(A){this.colors=A,this.framebuffer=null,this.p5Instance=null}setup(A){this.p5Instance=A;const e=Math.max(this.colors.length,1);this.framebuffer=this.p5Instance.createFramebuffer({density:1,width:e,height:1,depthFormat:this.p5Instance.UNSIGNED_INT,textureFiltering:this.p5Instance.NEAREST}),this.updateFramebuffer()}updateFramebuffer(){if(!this.framebuffer||!this.p5Instance)return;const A=Math.max(this.colors.length,1);this.framebuffer.resize(A,1),this.framebuffer.loadPixels();for(let e=0;e<A;e++){const A=e<this.colors.length?this.p5Instance.color(this.colors[e]):this.p5Instance.color(0,0,0,0),t=4*e;this.framebuffer.pixels[t]=this.p5Instance.red(A),this.framebuffer.pixels[t+1]=this.p5Instance.green(A),this.framebuffer.pixels[t+2]=this.p5Instance.blue(A),this.framebuffer.pixels[t+3]=this.p5Instance.alpha(A)}this.framebuffer.updatePixels()}setColors(A){this.colors=A,this.updateFramebuffer()}getFramebuffer(){return this.framebuffer}getColors(){return this.colors}}class w{p5Instance;asciiFontTextureAtlas;characters;characterColors;characterColorPalette;constructor({p5Instance:A,asciiFontTextureAtlas:e,characters:t}){this.p5Instance=A,this.asciiFontTextureAtlas=e,this.characters=this.validateCharacters(t),this.characterColors=this.asciiFontTextureAtlas.getCharsetColorArray(this.characters),this.characterColorPalette=new x(this.characterColors),this.characterColorPalette.setup(this.p5Instance)}validateCharacters(A){const t=this.asciiFontTextureAtlas.getUnsupportedCharacters(A);if(t.length>0)throw new e(`The following characters are not supported by the current font: [${t.join(", ")}].`);return Array.from(A)}setCharacterSet(A){this.characters=this.validateCharacters(A),this.characterColors=this.asciiFontTextureAtlas.getCharsetColorArray(this.characters),this.characterColorPalette.setColors(this.characterColors)}}class _{constructor(A,e,t,r,i){this._type=A,this._shader=e,this._brightnessStart=Math.floor(t/255*100)/100,this._brightnessEnd=Math.ceil(r/255*100)/100,this._characters=i,this._enabled=!0,this._onPaletteChangeCallback=null}registerPaletteChangeCallback(A){this._onPaletteChangeCallback=A}setup(A,e,t){this._shader=e,this._palette=new x(t),this._palette.setup(A)}setUniforms(A,e,t){this._shader.setUniform("textureID",e),this._shader.setUniform("originalTextureID",t),this._shader.setUniform("gradientTexture",this._palette.framebuffer),this._shader.setUniform("gradientTextureDimensions",[this._palette.framebuffer.width,1]),this._shader.setUniform("u_brightnessRange",[this._brightnessStart,this._brightnessEnd]),this._shader.setUniform("frameCount",A.frameCount)}set palette(A){this._onPaletteChangeCallback&&this._onPaletteChangeCallback(this,A)}get type(){return this._type}get enabled(){return this._enabled}set enabled(A){this._enabled=A}get brightnessStart(){return this._brightnessStart}set brightnessStart(A){this._brightnessStart=A}get brightnessEnd(){return this._brightnessEnd}set brightnessEnd(A){this._brightnessEnd=A}}class S extends _{constructor({type:A,shader:e,brightnessStart:t,brightnessEnd:r,characters:i,direction:s,angle:o,speed:n=.01}){super(A,e,t,r,i),this._direction=s,this._angle=o,this._speed=n}setUniforms(A,e,t){super.setUniforms(A,e,t),this._shader.setUniform("u_gradientDirection",this._direction),this._shader.setUniform("u_angle",this._angle*Math.PI/180),this._shader.setUniform("u_speed",this._speed)}get direction(){return this._direction}set direction(A){this._direction=A}get angle(){return this._angle}set angle(A){this._angle=A}get speed(){return this._speed}set speed(A){this._speed=A}}class b extends _{constructor({type:A,shader:e,brightnessStart:t,brightnessEnd:r,characters:i,direction:s,angle:o,speed:n=.01}){super(A,e,t,r,i),this._direction=s,this._angle=o,this._speed=n}setUniforms(A,e,t){super.setUniforms(A,e,t),this._shader.setUniform("u_gradientDirection",this._direction),this._shader.setUniform("u_angle",this._angle*Math.PI/180),this._shader.setUniform("u_speed",this._speed)}get direction(){return this._direction}set direction(A){this._direction=A}get angle(){return this._angle}set angle(A){this._angle=A}get speed(){return this._speed}set speed(A){this._speed=A}}class v extends _{constructor({type:A,shader:e,brightnessStart:t,brightnessEnd:r,characters:i,direction:s,centerX:o,centerY:n,speed:a,density:g}){super(A,e,t,r,i),this._direction=s,this._centerX=o,this._centerY=n,this._speed=a,this._density=g}setUniforms(A,e,t){super.setUniforms(A,e,t),this._shader.setUniform("u_gradientDirection",this._direction),this._shader.setUniform("u_centerX",this._centerX),this._shader.setUniform("u_centerY",this._centerY),this._shader.setUniform("u_speed",this._speed),this._shader.setUniform("u_density",this._density)}get direction(){return this._direction}set direction(A){this._direction=A}get centerX(){return this._centerX}set centerX(A){this._centerX=A}get centerY(){return this._centerY}set centerY(A){this._centerY=A}get speed(){return this._speed}set speed(A){this._speed=A}get density(){return this._density}set density(A){this._density=A}}class F extends _{constructor({type:A,shader:e,brightnessStart:t,brightnessEnd:r,characters:i,direction:s,centerX:o,centerY:n,radius:a}){super(A,e,t,r,i),this._direction=s,this._centerX=o,this._centerY=n,this._radius=a}setUniforms(A,e,t){super.setUniforms(A,e,t),this._shader.setUniform("u_gradientDirection",this._direction),this._shader.setUniform("u_centerX",this._centerX),this._shader.setUniform("u_centerY",this._centerY),this._shader.setUniform("u_radius",this._radius)}get direction(){return this._direction}set direction(A){this._direction=A}get centerX(){return this._centerX}set centerX(A){this._centerX=A}get centerY(){return this._centerY}set centerY(A){this._centerY=A}get radius(){return this._radius}set radius(A){this._radius=A}}class y extends _{constructor({type:A,shader:e,brightnessStart:t,brightnessEnd:r,characters:i,centerX:s,centerY:o,speed:n}){super(A,e,t,r,i),this._centerX=s,this._centerY=o,this._speed=n}setUniforms(A,e,t){super.setUniforms(A,e,t),this._shader.setUniform("u_centerX",this._centerX),this._shader.setUniform("u_centerY",this._centerY),this._shader.setUniform("u_speed",this._speed)}get centerX(){return this._centerX}set centerX(A){this._centerX=A}get centerY(){return this._centerY}set centerY(A){this._centerY=A}get speed(){return this._speed}set speed(A){this._speed=A}}class T extends _{constructor({type:A,shader:e,brightnessStart:t,brightnessEnd:r,characters:i,noiseScale:s,speed:o,direction:n}){super(A,e,t,r,i),this._direction=n,this._noiseScale=s,this._speed=o}setUniforms(A,e,t){super.setUniforms(A,e,t),this._shader.setUniform("direction",this._direction),this._shader.setUniform("noiseScale",this._noiseScale),this._shader.setUniform("u_speed",this._speed)}get direction(){return this._direction}set direction(A){this._direction=A}get noiseScale(){return this._noiseScale}set noiseScale(A){this._noiseScale=A}get speed(){return this._speed}set speed(A){this._speed=A}}class M{gradientParams={linear:{direction:1,angle:0,speed:.01},zigzag:{direction:1,angle:0,speed:.01},spiral:{direction:1,centerX:.5,centerY:.5,speed:.01,density:.01},radial:{direction:1,centerX:.5,centerY:.5,radius:.5},conical:{centerX:.5,centerY:.5,speed:.01},noise:{noiseScale:.1,speed:.01,direction:1}};gradientShaders={linear:"#version 100\nprecision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D textureID;uniform sampler2D originalTextureID;uniform sampler2D gradientTexture;uniform int frameCount;uniform float u_gradientDirection;uniform float u_speed;uniform float u_angle;uniform vec2 gradientTextureDimensions;uniform vec2 u_brightnessRange;void main(){vec2 logicalFragCoord=floor(gl_FragCoord.xy);vec4 texColor=texture2D(textureID,v_texCoord);vec4 originalTexColor=texture2D(originalTextureID,v_texCoord);if(texColor.r>=u_brightnessRange.x&&texColor.r<=u_brightnessRange.y&&texColor==originalTexColor){float position=logicalFragCoord.x*cos(u_angle)+logicalFragCoord.y*sin(u_angle);float index=mod(position+float(frameCount)*u_gradientDirection*u_speed,gradientTextureDimensions.x);index=floor(index);float texelPosition=(index+0.5)/gradientTextureDimensions.x;vec4 gradientColor=texture2D(gradientTexture,vec2(texelPosition,0.0));gl_FragColor=vec4(gradientColor.rgb,texColor.a);}else{gl_FragColor=texColor;}}",zigzag:"precision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D textureID;uniform sampler2D originalTextureID;uniform sampler2D gradientTexture;uniform int frameCount;uniform float u_gradientDirection;uniform float u_speed;uniform float u_angle;uniform vec2 gradientTextureDimensions;uniform vec2 u_brightnessRange;void main(){vec4 texColor=texture2D(textureID,v_texCoord);vec4 originalTexColor=texture2D(originalTextureID,v_texCoord);if(texColor.r>=u_brightnessRange[0]&&texColor.r<=u_brightnessRange[1]&&texColor==originalTexColor){vec2 logicalFragCoord=gl_FragCoord.xy;float positionX=logicalFragCoord.x*cos(u_angle)-logicalFragCoord.y*sin(u_angle);float positionY=logicalFragCoord.x*sin(u_angle)+logicalFragCoord.y*cos(u_angle);float rowIndex=floor(positionY);float direction=mod(rowIndex,2.0)==0.0 ? 1.0 :-1.0;float rowPosition=positionX;float index=mod(rowPosition+float(frameCount)*u_speed*direction*u_gradientDirection,gradientTextureDimensions.x);index=floor(index);float texelPosition=(index+0.5)/gradientTextureDimensions.x;vec4 gradientColor=texture2D(gradientTexture,vec2(texelPosition,0));gl_FragColor=vec4(gradientColor.rgb,texColor.a);}else{gl_FragColor=texColor;}}",spiral:"precision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D textureID;uniform sampler2D originalTextureID;uniform sampler2D gradientTexture;uniform int frameCount;uniform float u_gradientDirection;uniform float u_centerX;uniform float u_centerY;uniform float u_speed;uniform float u_density;uniform vec2 gradientTextureDimensions;uniform vec2 u_brightnessRange;void main(){vec4 texColor=texture2D(textureID,v_texCoord);vec4 originalTexColor=texture2D(originalTextureID,v_texCoord);if(texColor.r>=u_brightnessRange[0]&&texColor.r<=u_brightnessRange[1]&&texColor==originalTexColor){vec2 relativePosition=v_texCoord-vec2(u_centerX,u_centerY);float distance=length(relativePosition);float angle=atan(relativePosition.y,relativePosition.x);float adjustedAngle=angle+float(frameCount)*u_gradientDirection*u_speed;float index=mod((distance+adjustedAngle*u_density)*gradientTextureDimensions.x,gradientTextureDimensions.x);float normalizedIndex=(floor(index)+0.5)/gradientTextureDimensions.x;vec4 gradientColor=texture2D(gradientTexture,vec2(normalizedIndex,0));gl_FragColor=vec4(gradientColor.rgb,texColor.a);}else{gl_FragColor=texColor;}}",radial:"precision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D textureID;uniform sampler2D originalTextureID;uniform sampler2D gradientTexture;uniform float u_centerX;uniform float u_centerY;uniform float u_radius;uniform int frameCount;uniform int u_gradientDirection;uniform vec2 gradientTextureDimensions;uniform vec2 u_brightnessRange;void main(){vec4 texColor=texture2D(textureID,v_texCoord);vec4 originalTexColor=texture2D(originalTextureID,v_texCoord);if(texColor.r>=u_brightnessRange[0]&&texColor.r<=u_brightnessRange[1]&&texColor==originalTexColor){vec2 relativePosition=v_texCoord-vec2(u_centerX,u_centerY);float distance=length(relativePosition);float normalizedDistance=clamp(distance/u_radius,0.0,1.0);float index=normalizedDistance*(gradientTextureDimensions.x-1.0);float animatedIndex=mod(index+float(frameCount)*0.1*float(-u_gradientDirection),gradientTextureDimensions.x);float normalizedIndex=(floor(animatedIndex)+0.5)/gradientTextureDimensions.x;vec4 gradientColor=texture2D(gradientTexture,vec2(normalizedIndex,0));gl_FragColor=vec4(gradientColor.rgb,texColor.a);}else{gl_FragColor=texColor;}}",conical:"precision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D textureID;uniform sampler2D originalTextureID;uniform sampler2D gradientTexture;uniform float u_centerX;uniform float u_centerY;uniform int frameCount;uniform float u_speed;uniform vec2 gradientTextureDimensions;uniform vec2 u_brightnessRange;void main(){vec2 flippedTexCoord=vec2(v_texCoord.x,v_texCoord.y);vec4 texColor=texture2D(textureID,flippedTexCoord);vec4 originalTexColor=texture2D(originalTextureID,flippedTexCoord);if(texColor.r>=u_brightnessRange[0]&&texColor.r<=u_brightnessRange[1]&&texColor==originalTexColor){vec2 relativePosition=flippedTexCoord-vec2(u_centerX,u_centerY);float angle=atan(relativePosition.y,relativePosition.x);float adjustedAngle=angle+float(frameCount)*u_speed;float normalizedAngle=mod(adjustedAngle+3.14159265,2.0*3.14159265)/(2.0*3.14159265);float index=normalizedAngle*gradientTextureDimensions.x;float normalizedIndex=mod(floor(index)+0.5,gradientTextureDimensions.x)/gradientTextureDimensions.x;vec4 gradientColor=texture2D(gradientTexture,vec2(normalizedIndex,0));gl_FragColor=vec4(gradientColor.rgb,texColor.a);}else{gl_FragColor=texColor;}}",noise:"precision mediump float;\n#define GLSLIFY 1\nvarying vec2 v_texCoord;uniform sampler2D textureID;uniform sampler2D originalTextureID;uniform sampler2D gradientTexture;uniform int frameCount;uniform float noiseScale;uniform float u_speed;uniform float direction;uniform vec2 gradientTextureDimensions;uniform vec2 u_brightnessRange;vec3 permute(vec3 x){return mod(((x*34.0)+1.0)*x,289.0);}float snoise(vec2 v){const vec4 C=vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);vec2 i=floor(v+dot(v,C.yy));vec2 x0=v-i+dot(i,C.xx);vec2 i1;i1=(x0.x>x0.y)? vec2(1.0,0.0): vec2(0.0,1.0);vec4 x12=x0.xyxy+C.xxzz;x12.xy-=i1;i=mod(i,289.0);vec3 p=permute(permute(i.y+vec3(0.0,i1.y,1.0))+i.x+vec3(0.0,i1.x,1.0));vec3 m=max(0.5-vec3(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),0.0);m=m*m;m=m*m;vec3 x=2.0*fract(p*C.www)-1.0;vec3 h=abs(x)-0.5;vec3 ox=floor(x+0.5);vec3 a0=x-ox;m*=1.79284291400159-0.85373472095314*(a0*a0+h*h);vec3 g;g.x=a0.x*x0.x+h.x*x0.y;g.yz=a0.yz*x12.xz+h.yz*x12.yw;return 130.0*dot(m,g);}void main(){vec4 texColor=texture2D(textureID,v_texCoord);vec4 originalTexColor=texture2D(originalTextureID,v_texCoord);if(texColor.r>=u_brightnessRange[0]&&texColor.r<=u_brightnessRange[1]&&texColor==originalTexColor){vec2 directionVec=vec2(cos(radians(direction)),sin(radians(direction)));vec2 uv=v_texCoord*noiseScale+directionVec*float(frameCount)*u_speed*0.01;float noiseValue=snoise(uv);float normalizedNoiseValue=(noiseValue+1.0)/2.0;float index=normalizedNoiseValue*(gradientTextureDimensions.x-1.0);float texelPosition=(floor(index)+0.5)/gradientTextureDimensions.x;vec4 gradientColor=texture2D(gradientTexture,vec2(texelPosition,0));gl_FragColor=vec4(gradientColor.rgb,texColor.a);}else{gl_FragColor=texColor;}}"};gradientConstructors={linear:({type:A,shader:e,params:t})=>new S({type:A,shader:e,...t}),zigzag:({type:A,shader:e,params:t})=>new b({type:A,shader:e,...t}),spiral:({type:A,shader:e,params:t})=>new v({type:A,shader:e,...t}),radial:({type:A,shader:e,params:t})=>new F({type:A,shader:e,...t}),conical:({type:A,shader:e,params:t})=>new y({type:A,shader:e,...t}),noise:({type:A,shader:e,params:t})=>new T({type:A,shader:e,...t})};_setupQueue=[];_gradients=[];setup(A){this.fontTextureAtlas=A,this.setupShaders(),this.setupGradientQueue()}addInstance(A){this.p5Instance=A}setupGradientQueue(){for(let A of this._setupQueue)A.setup(this.p5Instance,this.gradientShaders[A.type],this.fontTextureAtlas.getCharsetColorArray(A._characters));this._setupQueue=[]}getGradientParams(A,e){return{...this.gradientParams[A],...e}}addGradient(A,e,t,r,i){const s=this.getGradientParams(A,{brightnessStart:e,brightnessEnd:t,characters:r,...i}),o=this.gradientConstructors[A]({type:A,shader:this.gradientShaders[A],params:s});return o.registerPaletteChangeCallback(this.handleGradientPaletteChange.bind(this)),this._gradients.push(o),this.p5Instance._setupDone?o.setup(this.p5Instance,this.gradientShaders[A],this.fontTextureAtlas.getCharsetColorArray(r)):this._setupQueue.push(o),o}removeGradient(A){const e=this._gradients.indexOf(A);e>-1&&this._gradients.splice(e,1)}handleGradientPaletteChange(A,e){this.p5Instance._setupDone?A._palette.setColors(this.fontTextureAtlas.getCharsetColorArray(e)):A._characters=e}setupShaders(){for(let A in this.gradientShaders)this.gradientShaders[A]=this.p5Instance.createShader(a,this.gradientShaders[A])}}class U extends n{constructor(A,e,t,r,i){super(A,e,t,i),this.options.characterColor=this.p.color(this.options.characterColor),this.options.backgroundColor=this.p.color(this.options.backgroundColor),this.gradientManager=r,this.grayscaleShader=this.p.createShader(a,"precision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_image;varying vec2 v_texCoord;void main(){vec4 color=texture2D(u_image,v_texCoord);float luminance=0.299*color.r+0.587*color.g+0.114*color.b;color.rgb=vec3(luminance);gl_FragColor=color;}"),this.colorSampleShader=this.p.createShader(a,"#version 100\nprecision mediump float;\n#define GLSLIFY 1\nuniform sampler2D u_sketchTexture;uniform bool u_previousRendererEnabled;uniform sampler2D u_previousColorTexture;uniform sampler2D u_sampleTexture;uniform sampler2D u_sampleReferenceTexture;uniform vec2 u_gridCellDimensions;uniform int u_sampleMode;uniform vec4 u_staticColor;void main(){vec2 cellCoord=floor(gl_FragCoord.xy);vec2 cellSizeInTexCoords=vec2(1.0)/u_gridCellDimensions;vec2 cellCenterTexCoord=(cellCoord+vec2(0.5))*cellSizeInTexCoords;bool isMatchingSample=texture2D(u_sampleTexture,cellCenterTexCoord)==texture2D(u_sampleReferenceTexture,cellCenterTexCoord);if(isMatchingSample&&u_previousRendererEnabled){gl_FragColor=texture2D(u_previousColorTexture,cellCenterTexCoord);return;}else if(u_sampleMode==0){gl_FragColor=texture2D(u_sketchTexture,cellCenterTexCoord);}else{gl_FragColor=u_staticColor;}}"),this.asciiShader=this.p.createShader(a,g),this.grayscaleFramebuffer=this.p.createFramebuffer({density:1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.prevAsciiCharacterFramebuffer=this.p.createFramebuffer({density:1,width:this.grid.cols,height:this.grid.rows,depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST})}resizeFramebuffers(){super.resizeFramebuffers(),this.grayscaleFramebuffer.resize(this.grid.cols,this.grid.rows),this.prevAsciiCharacterFramebuffer.resize(this.grid.cols,this.grid.rows)}render(A,e,t){this.grayscaleFramebuffer.begin(),this.p.clear(),this.p.shader(this.grayscaleShader),this.grayscaleShader.setUniform("u_image",A),this.p.rect(0,0,this.p.width,this.p.height),this.grayscaleFramebuffer.end(),this.prevAsciiCharacterFramebuffer.begin(),this.p.clear(),this.p.image(this.grayscaleFramebuffer,-this.grid.cols/2,-this.grid.rows/2),this.prevAsciiCharacterFramebuffer.end(),this.asciiCharacterFramebuffer.begin(),this.p.clear(),this.p.image(this.grayscaleFramebuffer,-this.grid.cols/2,-this.grid.rows/2),this.asciiCharacterFramebuffer.end();for(let A=0;A<this.gradientManager._gradients.length;A++){const e=this.gradientManager._gradients[A];e.enabled&&([this.prevAsciiCharacterFramebuffer,this.asciiCharacterFramebuffer]=[this.asciiCharacterFramebuffer,this.prevAsciiCharacterFramebuffer],this.asciiCharacterFramebuffer.begin(),this.p.clear(),this.p.shader(e._shader),e.setUniforms(this.p,this.prevAsciiCharacterFramebuffer,this.grayscaleFramebuffer),this.p.rect(0,0,this.grid.cols,this.grid.rows),this.asciiCharacterFramebuffer.end())}this.primaryColorSampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_sketchTexture",A),this.colorSampleShader.setUniform("u_previousRendererEnabled",e.options.enabled),this.colorSampleShader.setUniform("u_previousColorTexture",e.primaryColorSampleFramebuffer),this.colorSampleShader.setUniform("u_sampleTexture",this.asciiCharacterFramebuffer),this.colorSampleShader.setUniform("u_sampleReferenceTexture",this.grayscaleFramebuffer),this.colorSampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.colorSampleShader.setUniform("u_sampleMode",this.options.characterColorMode),this.colorSampleShader.setUniform("u_staticColor",this.options.characterColor._array),this.p.rect(0,0,this.p.width,this.p.height),this.primaryColorSampleFramebuffer.end(),this.secondaryColorSampleFramebuffer.begin(),this.p.clear(),this.p.shader(this.colorSampleShader),this.colorSampleShader.setUniform("u_sketchTexture",A),this.colorSampleShader.setUniform("u_previousRendererEnabled",e.options.enabled),this.colorSampleShader.setUniform("u_previousColorTexture",e.secondaryColorSampleFramebuffer),this.colorSampleShader.setUniform("u_sampleTexture",this.asciiCharacterFramebuffer),this.colorSampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.colorSampleShader.setUniform("u_sampleMode",this.options.backgroundColorMode),this.colorSampleShader.setUniform("u_staticColor",this.options.backgroundColor._array),this.p.rect(0,0,this.p.width,this.p.height),this.secondaryColorSampleFramebuffer.end(),this.outputFramebuffer.begin(),this.p.clear(),this.p.shader(this.asciiShader),this.asciiShader.setUniform("u_layer",2),this.asciiShader.setUniform("u_pixelRatio",this.p.pixelDensity()),this.asciiShader.setUniform("u_resolution",[this.p.width,this.p.height]),this.asciiShader.setUniform("u_characterTexture",this.characterSet.asciiFontTextureAtlas.texture),this.asciiShader.setUniform("u_charsetDimensions",[this.characterSet.asciiFontTextureAtlas.charsetCols,this.characterSet.asciiFontTextureAtlas.charsetRows]),this.asciiShader.setUniform("u_gradientReferenceTexture",this.grayscaleFramebuffer),this.asciiShader.setUniform("u_primaryColorTexture",this.primaryColorSampleFramebuffer),this.asciiShader.setUniform("u_secondaryColorTexture",this.secondaryColorSampleFramebuffer),this.asciiShader.setUniform("u_asciiCharacterTexture",this.asciiCharacterFramebuffer),t||this.asciiShader.setUniform("u_prevAsciiTexture",e.outputFramebuffer),this.asciiShader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.asciiShader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.asciiShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.asciiShader.setUniform("u_invertMode",this.options.invertMode),this.asciiShader.setUniform("u_rotationAngle",this.p.radians(this.options.rotationAngle)),this.p.rect(0,0,this.p.width,this.p.height),this.outputFramebuffer.end()}}class G{gradientManager=new M;lastRenderer=null;setup(A,e,t){this.p=A,this.grid=e,this.fontTextureAtlas=t,this.currentCanvasDimensions={width:this.p.width,height:this.p.height},this.gradientCharacterSet=new w({p5Instance:this.p,asciiFontTextureAtlas:t,characters:f.characters}),this.gradientManager.setup(this.fontTextureAtlas),this.renderers=[new h(this.p,this.grid,new w({p5Instance:this.p,asciiFontTextureAtlas:t,characters:f.characters}),{...f}),new E(this.p,this.grid,new w({p5Instance:this.p,asciiFontTextureAtlas:t,characters:p.characters}),{...p}),new U(this.p,this.grid,this.gradientCharacterSet,this.gradientManager,{...m}),new u(this.p,this.grid,new w({p5Instance:this.p,asciiFontTextureAtlas:t,characters:D.characters}),{...D}),new Q(this.p,this.grid,new w({p5Instance:this.p,asciiFontTextureAtlas:t,characters:f.characters}),{...P})],this.textAsciiRenderer=new C(this.p,t,this.grid,this.fontBase64,this.fontFileType,{...I})}render(A,e){let t=A,r=this.renderers[0],i=!0;for(let e of this.renderers)e.options.enabled&&(e.render(A,r,i),t=e.getOutputFramebuffer(),r=e,i=!1,this.lastRenderer=e);this.p.clear(),this.p.background(e),this.p.image(t,-this.p.width/2,-this.p.height/2),this.textAsciiRenderer.options.enabled&&this.textAsciiRenderer.outputAsciiToHtml(this.lastRenderer),this.checkCanvasDimensions()}checkCanvasDimensions(){this.currentCanvasDimensions.width===this.p.width&&this.currentCanvasDimensions.height===this.p.height||(this.currentCanvasDimensions.width=this.p.width,this.currentCanvasDimensions.height=this.p.height,this.grid.reset(),this.renderers.forEach((A=>{A.resizeFramebuffers()})),this.textAsciiRenderer.updateDimensions())}}var Y="data:text/javascript;base64,n";const k=new class{borderColor;fontSize;rendererManager;font;postSetupFunction;postDrawFunction;p;asciiFontTextureAtlas;grid;events;sketchFramebuffer;constructor(){this.borderColor="#000000",this.fontSize=16,this.rendererManager=new G,this.events=new i,this.font=null,this.postSetupFunction=null,this.postDrawFunction=null}instance(A){this.p=A,this.p.preload=()=>{}}addP5Instance(A){this.p=A,this.rendererManager.gradientManager.addInstance(this.p)}setup(){this.asciiFontTextureAtlas=new t({p5Instance:this.p,font:this.font,fontSize:this.fontSize}),this.grid=new r(this.p,this.asciiFontTextureAtlas.maxGlyphDimensions.width,this.asciiFontTextureAtlas.maxGlyphDimensions.height),this.rendererManager.setup(this.p,this.grid,this.asciiFontTextureAtlas),this.sketchFramebuffer=this.p.createFramebuffer({depthFormat:this.p.UNSIGNED_INT,textureFiltering:this.p.NEAREST}),this.postSetupFunction&&this.postSetupFunction()}emit(A,e){this.events.emit(A,e)}on(A,e){this.events.on(A,e)}off(A,e){this.events.off(A,e)}asciify(){this.rendererManager.render(this.sketchFramebuffer,this.borderColor),this.postDrawFunction&&this.postDrawFunction()}};return"undefined"!=typeof window&&(window.p5asciify=k,window.preload=function(){}),function(t){A.prototype.setupP5Instance=function(){t.addP5Instance(this)},A.prototype.setupAsciifier=function(){!function(A){if(!A._setupDone){if(A._renderer.drawingContext instanceof CanvasRenderingContext2D)throw new e("WebGL renderer is required for p5.asciify to work.");if(function(A,e){const[t,r]=[A,e].map((A=>A.split(".").map(Number)));for(let A=0;A<Math.max(t.length,r.length);A++){const e=t[A]??0,i=r[A]??0;if(e!==i)return e>i?1:-1}return 0}(A.VERSION,"1.8.0")<0)throw new e("p5.asciify requires p5.js v1.8.0 or higher to work.")}}(this),t.setup()},A.prototype.registerMethod("init",A.prototype.setupP5Instance),A.prototype.registerMethod("afterSetup",A.prototype.setupAsciifier)}(k),function(t){A.prototype.preloadAsciiFont=function(){this._incrementPreload(),t.font=this.loadFont(Y,(A=>{t.font=A,t.rendererManager.fontBase64=`${Y}`,t.rendererManager.fontFileType="truetype"}),(()=>{throw new e(`loadAsciiFont() | Failed to load font from path: '${Y}'`)}))},A.prototype.loadAsciiFont=function(A){return new Promise(((r,i)=>{const s=async(A,e)=>{t.font=A;try{const A=await fetch(e),r=await A.arrayBuffer(),i=btoa(new Uint8Array(r).reduce(((A,e)=>A+String.fromCharCode(e)),""));let s="";s=e.toLowerCase().endsWith(".ttf")?"truetype":e.toLowerCase().endsWith(".otf")?"opentype":"truetype",t.rendererManager.fontBase64=`data:font/${s};charset=utf-8;base64,${i}`,t.rendererManager.fontFileType=s}catch(A){console.error("Error converting font to Base64:",A)}if(this._setupDone)try{t.asciiFontTextureAtlas.setFontObject(A),t.rendererManager.renderers.forEach((A=>{A.characterSet.setCharacterSet(A.characterSet.characters)})),t.rendererManager.grid.resizeCellPixelDimensions(t.asciiFontTextureAtlas.maxGlyphDimensions.width,t.asciiFontTextureAtlas.maxGlyphDimensions.height),t.rendererManager.textAsciiRenderer.updateFont(t.rendererManager.fontBase64,t.rendererManager.fontFileType)}catch(A){return i(A)}this._decrementPreload(),t.emit("fontUpdated",{base64:t.rendererManager.fontBase64,fileType:t.rendererManager.fontFileType}),r()};"string"==typeof A?this.loadFont(A,(e=>{s(e,A)}),(()=>{i(new e(`loadAsciiFont() | Failed to load font from path: '${A}'`))})):i(new e("loadAsciiFont() | Invalid font parameter. Expected a string/path."))}))},A.prototype.registerMethod("beforePreload",A.prototype.preloadAsciiFont),A.prototype.registerPreloadMethod("loadAsciiFont",A.prototype)}(k),function(e){A.prototype.setAsciifyBorderColor=function(A){e.borderColor=this.color(A)},A.prototype.setAsciifyFontSize=function(A){e.fontSize=A,this._setupDone&&(e.asciiFontTextureAtlas.setFontSize(A),e.grid.resizeCellPixelDimensions(this.asciiFontTextureAtlas.maxGlyphDimensions.width,this.asciiFontTextureAtlas.maxGlyphDimensions.height),e.rendererManager.renderers.forEach((A=>A.resetShaders())),e.rendererManager.textAsciiRenderer.updateFontSize())},A.prototype.setAsciifyPostSetupFunction=function(A){e.postSetupFunction=A},A.prototype.setAsciifyPostDrawFunction=function(A){e.postDrawFunction=A}}(k),function(t){A.prototype.addAsciiGradient=function(A,r,i,s,o={}){return function(A,t,r,i,s,o){if(!A.gradientConstructors[t])throw new e(`Gradient '${t}' does not exist! Available gradients: ${Object.keys(A.gradientConstructors).join(", ")}`);if("number"!=typeof r||r<0||r>255)throw new e(`Invalid brightness start value '${r}'. Expected a number between 0 and 255.`);if("number"!=typeof i||i<0||i>255)throw new e(`Invalid brightness end value '${i}'. Expected a number between 0 and 255.`);if("string"!=typeof s)throw new e(`Invalid characters value '${s}'. Expected a string.`);const n=Object.keys(A.gradientParams[t]),a=Object.keys(o).filter((A=>!n.includes(A)));if(a.length>0)throw new e(`Invalid parameter(s) for gradient '${t}': ${a.join(", ")}\nValid parameters are: ${n.join(", ")}`)}(t.rendererManager.gradientManager,A,r,i,s,o),t.rendererManager.gradientManager.addGradient(A,r,i,s,o)},A.prototype.removeAsciiGradient=function(A){t.rendererManager.gradientManager.removeGradient(A)}}(k),function(e){A.prototype.preDrawAddPush=function(){e.sketchFramebuffer.begin(),this.clear(),this.push()},A.prototype.registerMethod("pre",A.prototype.preDrawAddPush),A.prototype.postDrawAddPop=function(){this.pop(),e.sketchFramebuffer.end()},A.prototype.registerMethod("post",A.prototype.postDrawAddPop),A.prototype.asciify=function(){e.asciify()},A.prototype.registerMethod("post",A.prototype.asciify)}(k),k}));
