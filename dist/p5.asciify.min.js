class P5AsciifyConstants{static VERT_SHADER_CODE=" #version 300 es\n                                precision highp float;\n\n                                layout(location = 0) in vec3 aPosition;\n                                layout(location = 1) in vec2 aTexCoord;\n\n                                out vec2 v_texCoord;\n\n                                void main() {\n                                    vec4 positionVec4 = vec4(aPosition, 1.0);\n\n                                    positionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n\n                                    gl_Position = positionVec4;\n\n                                    v_texCoord = aTexCoord;\n                                }";static ASCII_FRAG_SHADER_CODE="   #version 300 es\n                                        precision highp float;\n\n                                        uniform sampler2D u_characterTexture;\n                                        uniform float u_charsetCols;\n                                        uniform float u_charsetRows;\n                                        uniform int u_totalChars;\n\n                                        uniform sampler2D u_sketchTexture;\n                                        uniform sampler2D u_rotationTexture;\n                                        uniform sampler2D u_edgesTexture; \n                                        uniform sampler2D u_asciiBrightnessTexture;\n\n                                        uniform vec2 u_gridCellDimensions;\n                                        uniform vec2 u_gridPixelDimensions;\n                                        uniform vec2 u_gridOffsetDimensions;\n\n                                        uniform vec3 u_characterColor;\n                                        uniform int u_characterColorMode;\n                                        uniform vec3 u_backgroundColor;\n                                        uniform int u_backgroundColorMode;\n\n                                        uniform float u_rotationAngle;\n\n                                        uniform int u_invertMode;\n\n                                        uniform int u_renderMode;\n\n                                        uniform bool u_brightnessEnabled;\n\n                                        out vec4 fragColor;\n\n                                        mat2 rotate2D(float angle) {\n                                            float s = sin(angle);\n                                            float c = cos(angle);\n                                            return mat2(c, -s, s, c);\n                                        }\n\n                                        void main() {\n                                            vec2 adjustedCoord = (gl_FragCoord.xy - u_gridOffsetDimensions) / u_gridPixelDimensions;\n\n                                            if(adjustedCoord.x < 0.0f || adjustedCoord.x > 1.0f || adjustedCoord.y < 0.0f || adjustedCoord.y > 1.0f) {\n                                                fragColor = vec4(u_backgroundColor, 1.0f);\n                                                return;\n                                            }\n\n                                            // Calculate the grid coordinate\n                                            vec2 gridCoord = adjustedCoord * u_gridCellDimensions;\n                                            vec2 cellCoord = floor(gridCoord);\n                                            vec2 centerCoord = cellCoord + vec2(0.5f);\n                                            vec2 baseCoord = centerCoord / u_gridCellDimensions;\n\n                                            vec4 edgeColor; // edge color (only used in edges mode)\n                                            vec4 sketchColor; // Simulation color\n\n                                            if(u_renderMode == 1) { // edges mode\n                                                edgeColor = texture(u_edgesTexture, baseCoord);\n                                                sketchColor = texture(u_sketchTexture, baseCoord);\n\n                                                if(edgeColor.rgb == vec3(0.0f)) {\n                                                    if (u_brightnessEnabled) {\n                                                    fragColor = texture(u_asciiBrightnessTexture, gl_FragCoord.xy / vec2(textureSize(u_asciiBrightnessTexture, 0)));\n                                                    } else {\n                                                     fragColor = vec4(u_backgroundColor, 1.0f);\n                                                    }\n                                                    return;\n                                                }\n                                            } else { // Brightness mode\n                                                sketchColor = texture(u_sketchTexture, baseCoord);\n                                            }\n\n                                            float brightness = u_renderMode == 1 ? edgeColor.r : dot(sketchColor.rgb, vec3(0.299f, 0.587f, 0.114f));\n\n                                            // Map the brightness to a character index\n                                            int charIndex = int(brightness * float(u_totalChars));\n\n                                            // Calculate the column and row of the character in the charset texture\n                                            int charCol = charIndex % int(u_charsetCols);\n                                            int charRow = charIndex / int(u_charsetCols);\n\n                                            // Calculate the texture coordinate of the character in the charset texture\n                                            vec2 charCoord = vec2(float(charCol) / u_charsetCols, float(charRow) / u_charsetRows);\n                                            \n                                            // Sample the rotation texture and calculate brightness for rotation angle\n                                            vec4 rotationColor = texture(u_rotationTexture, baseCoord);\n                                            float rotationBrightness = dot(rotationColor.rgb, vec3(0.299f, 0.587f, 0.114f));\n                                            float rotationAngle = rotationBrightness * 2.0 * 3.14159265; // Convert brightness to angle (0 to 2*PI radians)\n\n                                            vec2 fractionalPart = fract(gridCoord) - 0.5f; // Center fractional part around (0,0) for rotation\n                                            fractionalPart = rotate2D(u_rotationAngle) * fractionalPart; // Rotate fractional part\n                                            fractionalPart += 0.5f; // Move back to original coordinate space\n\n                                            // Calculate the texture coordinates\n                                            vec2 cellMin = charCoord;\n                                            vec2 cellMax = charCoord + vec2(1.0f / u_charsetCols, 1.0f / u_charsetRows);\n                                            vec2 texCoord = charCoord + fractionalPart * vec2(1.0f / u_charsetCols, 1.0f / u_charsetRows);\n\n                                            // Determine if the texture coordinate is within the cell boundaries\n                                            bool outsideBounds = any(lessThan(texCoord, cellMin)) || any(greaterThan(texCoord, cellMax));\n\n                                            // Get the color of the character from the charset texture or use the background color if outside bounds\n                                            vec4 charColor = outsideBounds ? vec4(u_backgroundColor, 1.0f) : texture(u_characterTexture, texCoord);\n\n                                            // If the inversion mode is enabled, invert the character color\n                                            if(u_invertMode == 1) {\n                                                charColor.a = 1.0f - charColor.a;\n                                                charColor.rgb = vec3(1.0f);\n                                            }\n\n                                            // Calculate the final color of the character\n                                            vec4 finalColor = (u_characterColorMode == 0) ? vec4(sketchColor.rgb * charColor.rgb, charColor.a) : vec4(u_characterColor * charColor.rgb, charColor.a);\n\n                                            // If the background color mode is 0, mix the sketch color and the final color based on the character's alpha value\n                                            // Otherwise, mix the background color and the final color based on the character's alpha value\n                                            if(u_backgroundColorMode == 0) {\n                                                fragColor = mix(vec4(sketchColor.rgb, 1.0f), finalColor, charColor.a);\n                                            } else {\n                                                fragColor = mix(vec4(u_backgroundColor, 1.0f), finalColor, charColor.a);\n                                            }\n\n                                            // Override final color with background color for out-of-bounds areas due to rotation\n                                            if (outsideBounds) {\n                                                fragColor = (u_backgroundColorMode == 0) \n                                                            ? (u_invertMode == 1 ? (u_characterColorMode == 0 ? vec4(sketchColor.rgb, 1.0f) : vec4(u_characterColor, 1.0f)) : vec4(sketchColor.rgb, 1.0f)) \n                                                            : (u_invertMode == 1 ? (u_characterColorMode == 0 ? vec4(sketchColor.rgb, 1.0f) : vec4(u_characterColor, 1.0f)) : vec4(u_backgroundColor, 1.0f));\n                                            }\n                                        }";static SAMPLE_FRAG_SHADER_CODE="  #version 300 es\n                                        precision highp float;\n\n                                        uniform sampler2D u_image;\n\n                                        uniform vec2 u_gridCellDimensions; // New uniform to store the dimensions of the grid (number of columns and rows)\n                                        uniform int u_threshold;\n                                        out vec4 outColor;\n\n                                        const vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n                                        // Increase the size of the histogram arrays to handle larger cells\n                                        const int MAX_HISTOGRAM_SIZE = 16;\n                                        vec3 colorHistogram[MAX_HISTOGRAM_SIZE];\n                                        int countHistogram[MAX_HISTOGRAM_SIZE];\n\n                                        void main() {\n                                            vec2 bufferDimensions = u_gridCellDimensions;\n                                            vec2 imageDimensions = vec2(textureSize(u_image, 0));\n                                            vec2 gridCellDimensions = vec2(imageDimensions.x / bufferDimensions.x, imageDimensions.y / bufferDimensions.y);\n\n                                            ivec2 coords = ivec2(gl_FragCoord.xy);\n                                            int gridX = coords.x;\n                                            int gridY = coords.y;\n\n                                            ivec2 cellOrigin = ivec2(gridX * int(gridCellDimensions.x), gridY * int(gridCellDimensions.y));\n                                            int histogramIndex = 0;\n                                            int nonBlackCount = 0;\n\n                                            // Initialize histograms\n                                            for (int i = 0; i < MAX_HISTOGRAM_SIZE; i++) {\n                                                colorHistogram[i] = BLACK;\n                                                countHistogram[i] = 0;\n                                            }\n\n                                            // Iterate over the cell and populate the histograms\n                                            for (int i = 0; i < int(gridCellDimensions.x); i += 1) {\n                                                for (int j = 0; j < int(gridCellDimensions.y); j += 1) {\n                                                    ivec2 pixelCoords = cellOrigin + ivec2(i, j);\n                                                    vec3 color = texelFetch(u_image, pixelCoords, 0).rgb;\n\n                                                    if (color == BLACK) continue;\n\n                                                    nonBlackCount++;\n                                                    bool found = false;\n                                                    for (int k = 0; k < histogramIndex; k++) {\n                                                        if (colorHistogram[k] == color) {\n                                                            countHistogram[k]++;\n                                                            found = true;\n                                                            break;\n                                                        }\n                                                    }\n\n                                                    if (!found && histogramIndex < MAX_HISTOGRAM_SIZE) {\n                                                        colorHistogram[histogramIndex] = color;\n                                                        countHistogram[histogramIndex] = 1;\n                                                        histogramIndex++;\n                                                    }\n                                                }\n                                            }\n\n                                            vec3 mostFrequentColor = BLACK;\n                                            int highestCount = 0;\n\n                                            // Find the most frequent color\n                                            for (int k = 0; k < histogramIndex; k++) {\n                                                if (countHistogram[k] > highestCount) {\n                                                    mostFrequentColor = colorHistogram[k];\n                                                    highestCount = countHistogram[k];\n                                                }\n                                            }\n\n                                            // If the number of non-black pixels is below the threshold, output black, otherwise output the most frequent color\n                                            if (nonBlackCount < u_threshold) {\n                                                outColor = vec4(BLACK, 1.0);\n                                            } else {\n                                                outColor = vec4(mostFrequentColor, 1.0);\n                                            }\n                                        }";static SOBEL_FRAG_SHADER_CODE='   #version 300 es\n                                        precision highp float;\n\n                                        in vec2 v_texCoord;\n                                        out vec4 fragColor;\n\n                                        uniform sampler2D u_texture;\n                                        uniform vec2 u_textureSize;\n                                        uniform float u_threshold;\n\n                                        void main() {\n                                            vec2 texelSize = 1.0 / u_textureSize;\n\n                                            float kernelX[9];\n                                            float kernelY[9];\n\n                                            kernelX[0] = -1.0; kernelX[1] = 0.0; kernelX[2] = 1.0;\n                                            kernelX[3] = -2.0; kernelX[4] = 0.0; kernelX[5] = 2.0;\n                                            kernelX[6] = -1.0; kernelX[7] = 0.0; kernelX[8] = 1.0;\n\n                                            kernelY[0] = -1.0; kernelY[1] = -2.0; kernelY[2] = -1.0;\n                                            kernelY[3] = 0.0; kernelY[4] = 0.0; kernelY[5] = 0.0;\n                                            kernelY[6] = 1.0; kernelY[7] = 2.0; kernelY[8] = 1.0;\n\n                                            vec3 texColor[9];\n                                            for(int i = 0; i < 3; i++) {\n                                                for(int j = 0; j < 3; j++) {\n                                                    texColor[i * 3 + j] = texture(u_texture, v_texCoord + vec2(i - 1, j - 1) * texelSize).rgb;\n                                                }\n                                            }\n\n                                            vec3 sobelX = vec3(0.0);\n                                            vec3 sobelY = vec3(0.0);\n                                            for(int i = 0; i < 9; i++) {\n                                                sobelX += kernelX[i] * texColor[i];\n                                                sobelY += kernelY[i] * texColor[i];\n                                            }\n\n                                            vec3 sobel = sqrt(sobelX * sobelX + sobelY * sobelY);\n                                            float intensity = length(sobel) / sqrt(3.0);\n\n                                            float angleDeg = degrees(atan(sobelY.r, sobelX.r));\n                                            vec3 edgeColor = vec3(0.0);\n\n                                            if(intensity > u_threshold) {\n                                                if(angleDeg >= -22.5 && angleDeg < 22.5) {\n                                                    edgeColor = vec3(0.1); // "-"\n                                                } else if(angleDeg >= 22.5 && angleDeg < 67.5) {\n                                                    edgeColor = vec3(0.2); // "/"\n                                                } else if(angleDeg >= 67.5 && angleDeg < 112.5) {\n                                                    edgeColor = vec3(0.3); // "|"\n                                                } else if(angleDeg >= 112.5 && angleDeg < 157.5) {\n                                                    edgeColor = vec3(0.4); // ""\n                                                } else if(angleDeg >= 157.5 || angleDeg < -157.5) {\n                                                    edgeColor = vec3(0.6); // "-"\n                                                } else if(angleDeg >= -157.5 && angleDeg < -112.5) {\n                                                    edgeColor = vec3(0.7); // "/"\n                                                } else if(angleDeg >= -112.5 && angleDeg < -67.5) {\n                                                    edgeColor = vec3(0.8); // "|"\n                                                } else if(angleDeg >= -67.5 && angleDeg < -22.5) {\n                                                    edgeColor = vec3(0.9); // ""\n                                                }\n                                            }\n\n                                            fragColor = vec4(edgeColor, 1.0);\n                                        }';static KALEIDOSCOPE_FRAG_SHADER_CODE="#version 300 es\n                                            precision highp float;\n\n                                            uniform sampler2D u_image; // The image to apply the kaleidoscope effect\n                                            uniform int u_segments; // Number of kaleidoscope segments\n                                            uniform float u_angle; // Rotation angle for the kaleidoscope\n\n                                            in vec2 v_texCoord; // Texture coordinates from vertex shader\n                                            out vec4 fragColor; // Output color\n\n                                            #define PI 3.1415926535897932384626433832795\n\n                                            void main() {\n                                                // Calculate the angle per segment\n                                                float angle = 2.0 * PI / float(u_segments);\n\n                                                // Translate texture coordinates to the center\n                                                vec2 centeredCoord = v_texCoord - 0.5;\n                                                \n                                                // Rotate texture coordinates\n                                                float currentAngle = atan(centeredCoord.y, centeredCoord.x);\n                                                float radius = length(centeredCoord);\n                                                currentAngle = mod(currentAngle, angle);\n\n                                                // Mirror the segments\n                                                currentAngle = angle / 2.0 - abs(currentAngle - angle / 2.0);\n\n                                                // Apply the kaleidoscope rotation angle\n                                                currentAngle += u_angle;\n\n                                                // Convert polar coordinates back to Cartesian\n                                                vec2 rotatedCoord = vec2(cos(currentAngle), sin(currentAngle)) * radius;\n                                                \n                                                // Re-translate coordinates back\n                                                vec2 finalCoord = rotatedCoord + 0.5;\n                                                \n                                                // Sample the color from the image using the manipulated coordinates\n                                                vec4 color = texture(u_image, finalCoord);\n\n                                                // Output the color\n                                                fragColor = color;\n                                            }";static DISTORTION_FRAG_SHADER_CODE="  #version 300 es\n                                            precision highp float;\n\n                                            in vec2 v_texCoord;\n\n                                            uniform sampler2D u_image;\n                                            uniform float u_time;\n                                            uniform float u_frequency;\n                                            uniform float u_amplitude;\n\n                                            out vec4 fragColor;\n\n                                            void main() {\n                                            vec2 uv = v_texCoord;\n\n                                            float sineWave = sin(uv.y * u_frequency + u_time) * u_amplitude;\n\n                                            vec2 distort = vec2(sineWave, sineWave);\n\n                                            vec4 texColor = texture(u_image, mod(uv + distort, 1.0));\n\n                                            fragColor = texColor;\n                                            }";static GRAYSCALE_FRAG_SHADER_CODE="   #version 300 es\n                                            precision highp float;\n\n                                            uniform sampler2D u_image; \n                                            in vec2 v_texCoord; \n\n                                            out vec4 fragColor; \n\n                                            void main() {\n                                                vec4 color = texture(u_image, v_texCoord);\n                                                float luminance = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\n                                                color.rgb = vec3(luminance);\n                                                fragColor = color;\n                                            }";static INVERT_FRAG_SHADER_CODE="  #version 300 es\n                                        precision highp float;\n\n                                        uniform sampler2D u_image; // The image, whose colors get inverted\n                                        in vec2 v_texCoord; // Texture coordinates from vertex shader\n\n                                        out vec4 fragColor; // Output color\n\n                                        void main() {\n                                            // Sample the color from the image\n                                            vec4 color = texture(u_image, v_texCoord);\n\n                                            // Invert the color\n                                            color.rgb = 1.0 - color.rgb;\n\n                                            // Output the inverted color\n                                            fragColor = color;\n                                        }";static CHROMATIC_ABERRATION_FRAG_SHADER_CODE="#version 300 es\n                                                    precision highp float;\n\n                                                    uniform sampler2D u_image; // The image to apply the effect to\n                                                    in vec2 v_texCoord; // Texture coordinates from vertex shader\n\n                                                    // Parameters for controlling the effect\n                                                    uniform float u_aberrationAmount; // The amount of chromatic aberration\n                                                    uniform float u_aberrationAngle; // The angle of chromatic aberration\n\n                                                    out vec4 fragColor; // Output color\n\n                                                    void main() {\n                                                        // Calculate the offsets for each color channel\n                                                        vec2 redOffset = vec2(u_aberrationAmount * cos(u_aberrationAngle), u_aberrationAmount * sin(u_aberrationAngle));\n                                                        vec2 greenOffset = vec2(0.0, 0.0); // Green channel remains at the center\n                                                        vec2 blueOffset = vec2(-u_aberrationAmount * cos(u_aberrationAngle), -u_aberrationAmount * sin(u_aberrationAngle));\n\n                                                        // Sample the color for each channel with the offset\n                                                        float red = texture(u_image, v_texCoord + redOffset).r;\n                                                        float green = texture(u_image, v_texCoord + greenOffset).g;\n                                                        float blue = texture(u_image, v_texCoord + blueOffset).b;\n\n                                                        // Combine the colors back together\n                                                        vec4 color = vec4(red, green, blue, 1.0);\n\n                                                        // Output the color with chromatic aberration\n                                                        fragColor = color;\n                                                    }";static ROTATE_FRAG_SHADER_CODE="  #version 300 es\n                                        precision highp float;\n\n                                        uniform sampler2D u_image; // The image to rotate\n                                        uniform float u_angle; // The rotation angle\n                                        in vec2 v_texCoord; // Texture coordinates from vertex shader\n\n                                        out vec4 fragColor; // Output color\n\n                                        void main() {\n                                            // Translate texture coordinates to the center\n                                            vec2 centeredCoord = v_texCoord - 0.5;\n\n                                            // Rotate texture coordinates\n                                            vec2 rotatedCoord;\n                                            rotatedCoord.x = centeredCoord.x * cos(u_angle) - centeredCoord.y * sin(u_angle);\n                                            rotatedCoord.y = centeredCoord.x * sin(u_angle) + centeredCoord.y * cos(u_angle);\n\n                                            // Re-translate coordinates back\n                                            vec2 finalCoord = rotatedCoord + 0.5;\n\n                                            // Flip the y-coordinate\n                                            finalCoord.y = 1.0 - finalCoord.y;\n\n                                            // Sample the color from the image using the rotated and flipped coordinates\n                                            vec4 color = texture(u_image, finalCoord);\n\n                                            // Output the color\n                                            fragColor = color;\n                                        }";static BRIGHTNESS_FRAG_SHADER_CODE="  #version 300 es\n                                            precision highp float;\n\n                                            uniform sampler2D u_image; // The image to be brightness adjusted\n                                            uniform float u_brightness; // Brightness adjustment factor\n                                            in vec2 v_texCoord; // Texture coordinates from vertex shader\n\n                                            out vec4 fragColor; // Output color\n\n                                            void main() {\n                                                // Sample the color from the image\n                                                vec4 color = texture(u_image, v_texCoord);\n\n                                                // Adjust the color's brightness\n                                                color.rgb += u_brightness;\n\n                                                // Clamp the results to the valid range [0, 1] to avoid invalid colors\n                                                color.rgb = clamp(color.rgb, 0.0, 1.0);\n\n                                                // Output the brightness-adjusted color\n                                                fragColor = color;\n                                            }";static COLOR_PALETTE_FRAG_SHADER_CODE="   #version 300 es\n                                                precision mediump float;\n\n                                                uniform sampler2D u_image; // Original image\n                                                uniform sampler2D u_colorPalette; // Color palette image\n                                                uniform vec2 u_colorPaletteDimensions; // Dimensions of the color palette texture\n                                                uniform int u_colorPaletteRow; // Row index for the color palette texture\n                                                uniform float u_colorPaletteLength; // Number of colors in the gradient (length of the texture row)\n\n                                                out vec4 fragColor;\n\n                                                void main() {\n                                                    vec2 uv = gl_FragCoord.xy / vec2(textureSize(u_image, 0));\n\n                                                    vec4 texColor = texture(u_image, uv); // Color of the current fragment in the original image\n\n                                                    // Convert the original image color to grayscale\n                                                    float gray = (texColor.r + texColor.g + texColor.b) / 3.0;\n\n                                                    // Use the grayscale value as the horizontal coordinate in the color palette texture\n                                                    float paletteX = gray * (u_colorPaletteLength - 1.0);\n                                                    float paletteTexelPosition = (floor(paletteX) + 0.5) / u_colorPaletteDimensions.x;\n\n                                                    // Calculate the correct row position for the color palette texture\n                                                    float rowPosition = float(u_colorPaletteRow) + 0.5; // colorPaletteRow is an integer starting from 0\n                                                    float rowTexCoord = rowPosition / u_colorPaletteDimensions.y;\n\n                                                    // Fetch the color from the color palette texture\n                                                    vec4 paletteColor = texture(u_colorPalette, vec2(paletteTexelPosition, rowTexCoord));\n\n                                                    // Set the fragment color to the color from the palette\n                                                    fragColor = paletteColor;\n                                                }";static URSAFONT_BASE64="data:text/javascript;base64,}class P5AsciifyError extends Error{constructor(A){super(A),this.name="P5AsciifyError"}}class P5AsciifyGrid{constructor({cellWidth:A,cellHeight:e}){this.cellWidth=A,this.cellHeight=e}reset(){let[A,e]=this._calculateGridCellDimensions();this.cols=A,this.rows=e,this._resizeGrid()}_resizeGrid(){this.width=this.cols*this.cellWidth,this.height=this.rows*this.cellHeight,this.offsetX=Math.floor((width-this.width)/2),this.offsetY=Math.floor((height-this.height)/2)}_calculateGridCellDimensions(){return[Math.floor(width/this.cellWidth),Math.floor(height/this.cellHeight)]}resizeCellDimensions(A,e){this.cellWidth=A,this.cellHeight=e,this.reset()}}class P5AsciifyCharacterSet{constructor({fontSize:A=16,characters:e}){this.fontSize=A,this.characters=Array.from(e)}setup({font:A,characters:e,fontSize:t}){this.font=A,this.characters=Array.from(e),this.fontSize=t,this.reset()}reset(){this.glyphs=Object.values(this.font.font.glyphs.glyphs),this.glyphs=this.glyphs.filter((A=>void 0!==A.unicode)),this.maxGlyphDimensions=this.getMaxGlyphDimensions(this.fontSize),this.createTexture({fontSize:512})}getMaxGlyphDimensions(A){return this.glyphs.reduce(((e,t)=>{const B=t.getPath(0,0,A).getBoundingBox();return{width:Math.ceil(Math.max(e.width,B.x2-B.x1)),height:Math.ceil(Math.max(e.height,B.y2-B.y1))}}),{width:0,height:0})}setFontObject(A){this.font=A,this.reset()}setCharacterSet(A){this.characters=Array.from(A),this.createTexture({fontSize:512})}setCharacter({character:A,index:e}){this.characters[e]=A,this.createTexture({fontSize:512})}getUnsupportedCharacters(A){const e=new Set;for(const t of A){const A=t.codePointAt(0);this.glyphs.some((e=>e.unicodes.includes(A)))||e.add(t)}return Array.from(e)}setFontSize(A){this.fontSize=A,this.maxGlyphDimensions=this.getMaxGlyphDimensions(this.fontSize)}createTexture({fontSize:A}){this.charsetCols=Math.ceil(Math.sqrt(this.characters.length)),this.charsetRows=Math.ceil(this.characters.length/this.charsetCols);let e=this.getMaxGlyphDimensions(A);this.texture?this.texture.resize(e.width*this.charsetCols,e.height*this.charsetRows):this.texture=createFramebuffer({format:FLOAT,width:e.width*this.charsetCols,height:e.height*this.charsetRows}),this.texture.begin(),clear(),textFont(this.font),fill(255),textSize(A),textAlign(LEFT,TOP),noStroke();for(let A=0;A<this.characters.length;A++){const t=A%this.charsetCols,B=Math.floor(A/this.charsetCols),r=e.width*t,E=e.height*B,Q=this.characters[A];text(Q,r-e.width*this.charsetCols/2,E-e.height*this.charsetRows/2)}this.texture.end()}}class P5AsciifyColorPalette{constructor(){this.palettes=[]}setup(){this.texture=createFramebuffer({width:1,height:1}),this.palettes.length>0&&this.updateTexture()}updateTexture(){let A=this.palettes.reduce(((A,e)=>Math.max(A,e.length)),1);this.texture.resize(A,this.palettes.length),this.texture.loadPixels();for(let e=0;e<this.palettes.length;e++){let t=this.palettes[e].map((A=>color(A)));for(let B=0;B<t.length;B++){let r=4*(e*A+B),E=t[B];this.texture.pixels[r]=red(E),this.texture.pixels[r+1]=green(E),this.texture.pixels[r+2]=blue(E),this.texture.pixels[r+3]=alpha(E)}for(let B=t.length;B<A;B++){let t=4*(e*A+B);this.texture.pixels[t]=0,this.texture.pixels[t+1]=0,this.texture.pixels[t+2]=0,this.texture.pixels[t+3]=0}}this.texture.updatePixels()}reset(){this.palettes=[],this.texture.resize(1,1),this.texture.begin(),clear(),this.texture.end()}addPalette(A){return this.palettes.push(A),frameCount>0&&this.updateTexture(),this.palettes.length-1}removePalette(A){A>=0&&A<this.palettes.length?(this.palettes.splice(A,1),frameCount>0&&this.updateTexture()):console.warn(`Index ${A} is out of range`)}setPaletteColors(A,e){A>=0&&A<this.palettes.length?(this.palettes[A]=e,frameCount>0&&this.updateTexture()):console.warn(`Index ${A} is out of range`)}}class P5AsciifyUtils{static hexToRgb(A){return[parseInt(A.slice(1,3),16),parseInt(A.slice(3,5),16),parseInt(A.slice(5,7),16)]}static rgbToShaderColor(A){return[A[0]/255,A[1]/255,A[2]/255]}static hexToShaderColor(A){return this.rgbToShaderColor(this.hexToRgb(A))}static compareVersions(A,e){const[t,B]=[A,e].map((A=>A.split(".").map(Number)));for(let A=0;A<Math.max(t.length,B.length);A++){const[e,r]=[t[A]??0,B[A]??0];if(e!==r)return e>r?1:-1}return 0}static deepMerge(A,e){const t={...A};for(const B of Object.keys(e))null===e[B]||"object"!=typeof e[B]||Array.isArray(e[B])||!(B in A)||"object"!=typeof A[B]||Array.isArray(A[B])?t[B]=e[B]:t[B]=this.deepMerge(A[B],e[B]);return t}}class P5AsciifyEffectManager{effectParams={kaleidoscope:{segments:2,angle:0},distortion:{frequency:.1,amplitude:.1},grayscale:{},invert:{},chromaticaberration:{amount:.1,angle:0},rotate:{angle:0},brightness:{brightness:0},colorpalette:{palette:["#0f380f","#306230","#8bac0f","#9bbc0f"]}};effectShaders={kaleidoscope:P5AsciifyConstants.KALEIDOSCOPE_FRAG_SHADER_CODE,distortion:P5AsciifyConstants.DISTORTION_FRAG_SHADER_CODE,grayscale:P5AsciifyConstants.GRAYSCALE_FRAG_SHADER_CODE,invert:P5AsciifyConstants.INVERT_FRAG_SHADER_CODE,chromaticaberration:P5AsciifyConstants.CHROMATIC_ABERRATION_FRAG_SHADER_CODE,rotate:P5AsciifyConstants.ROTATE_FRAG_SHADER_CODE,brightness:P5AsciifyConstants.BRIGHTNESS_FRAG_SHADER_CODE,colorpalette:P5AsciifyConstants.COLOR_PALETTE_FRAG_SHADER_CODE};effectConstructors={kaleidoscope:({shader:A,params:e})=>new P5AsciifyKaleidoscopeEffect({shader:A,...e}),distortion:({shader:A,params:e})=>new P5AsciifyDistortionEffect({shader:A,...e}),grayscale:({shader:A,params:e})=>new P5AsciifyGrayscaleEffect({shader:A,...e}),invert:({shader:A,params:e})=>new P5AsciifyInvertEffect({shader:A,...e}),chromaticaberration:({shader:A,params:e})=>new P5AsciifyChromaticAberrationEffect({shader:A,...e}),rotate:({shader:A,params:e})=>new P5AsciifyRotateEffect({shader:A,...e}),brightness:({shader:A,params:e})=>new P5AsciifyBrightnessEffect({shader:A,...e}),colorpalette:({shader:A,params:e})=>new P5AsciifyColorPaletteEffect({shader:A,...e})};_setupQueue=[];constructor(){this._effects=[]}setupShaders(){for(let A in this.effectShaders)this.effectShaders[A]=createShader(P5AsciifyConstants.VERT_SHADER_CODE,this.effectShaders[A])}setupEffectQueue(){for(let A of this._setupQueue)A.shader=this.effectShaders[A.name]}addExistingEffectAtIndex(A,e){if(this.hasEffect(A))throw new P5AsciifyError(`Effect instance of type '${A.name}' already exists in the effect manager.`);A.shader=this.effectShaders[A.name],this._effects.splice(e,0,A),0===frameCount&&this._setupQueue.push(A)}getEffectIndex(A){const e=this._effects.indexOf(A);if(-1===e)throw new P5AsciifyError(`Effect instance of type '${A.name}' does not exist in the effect manager.`);return e}addEffect(A,e={}){if(!this.effectConstructors[A])throw new P5AsciifyError(`Effect '${A}' does not exist! \n                Available effects: ${Object.keys(this.effectConstructors).join(", ")}`);const t=Object.keys(this.effectParams[A]),B=Object.keys(e).filter((e=>!Object.keys(this.effectParams[A]).includes(e)));if(B.length>0)throw new P5AsciifyError(`Invalid parameter(s) for effect '${A}': ${B.join(", ")}\n                Valid parameters are: ${t.join(", ")}`);const r=0===frameCount?null:this.effectShaders[A],E={...this.effectParams[A],...e},Q=this.effectConstructors[A]({shader:r,params:E});return this._effects.push(Q),0===frameCount&&this._setupQueue.push(Q),Q}removeEffect(A){const e=this._effects.indexOf(A);if(!(e>-1))throw new P5AsciifyError(`Effect instance of type '${A.name}' cannot be removed because it does not exist in the effect manager.`);this._effects.splice(e,1)}hasEffect(A){return this._effects.includes(A)}swapEffects(A,e){const t=this._effects.indexOf(A),B=this._effects.indexOf(e);if(-1===t)throw new P5AsciifyError(`First effect parameter of type '${A.name}' cannot be swapped because it does not exist in the effect manager.`);if(-1===B)throw new P5AsciifyError(`Second effect parameter of type '${e.name}' cannot be swapped because it does not exist in the effect manager.`);[this._effects[t],this._effects[B]]=[this._effects[B],this._effects[t]]}getEffects(){return this._effects}}class P5AsciifyEffect{constructor(A,e){this._name=A,this._shader=e,this._enabled=!0}setUniforms(A){this._shader.setUniform("u_image",A)}get shader(){return this._shader}set shader(A){this._shader=A}get name(){return this._name}get enabled(){return this._enabled}set enabled(A){this._enabled=A}}class P5AsciifyKaleidoscopeEffect extends P5AsciifyEffect{constructor({shader:A,segments:e,angle:t}){super("kaleidoscope",A),this._segments=e,this._angle=t}setUniforms(A){super.setUniforms(A),this._shader.setUniform("u_segments",this._segments),this._shader.setUniform("u_angle",this._angle*Math.PI/180)}set segments(A){this._segments=A}set angle(A){this._angle=A}get segments(){return this._segments}get angle(){return this._angle}}class P5AsciifyDistortionEffect extends P5AsciifyEffect{constructor({shader:A,frequency:e,amplitude:t}){super("distortion",A),this._frequency=e,this._amplitude=t}setUniforms(A){super.setUniforms(A),this._shader.setUniform("u_frequency",this._frequency),this._shader.setUniform("u_amplitude",this._amplitude),this._shader.setUniform("u_time",.01*frameCount)}set frequency(A){this._frequency=A}set amplitude(A){this._amplitude=A}get frequency(){return this._frequency}get amplitude(){return this._amplitude}}class P5AsciifyGrayscaleEffect extends P5AsciifyEffect{constructor({shader:A}){super("grayscale",A)}}class P5AsciifyInvertEffect extends P5AsciifyEffect{constructor({shader:A}){super("invert",A)}}class P5AsciifyChromaticAberrationEffect extends P5AsciifyEffect{constructor({shader:A,amount:e,angle:t}){super("chromaticaberration",A),this._amount=e,this._angle=t}setUniforms(A){super.setUniforms(A),this._shader.setUniform("u_aberrationAmount",this._amount),this._shader.setUniform("u_aberrationAngle",this._angle*Math.PI/180)}set amount(A){this._amount=A}set angle(A){this._angle=A}get amount(){return this._amount}get angle(){return this._angle}}class P5AsciifyRotateEffect extends P5AsciifyEffect{constructor({shader:A,angle:e}){super("rotate",A),this._angle=e}setUniforms(A){super.setUniforms(A),this._shader.setUniform("u_angle",this._angle*Math.PI/180)}set angle(A){this._angle=A}get angle(){return this._angle}}class P5AsciifyBrightnessEffect extends P5AsciifyEffect{constructor({shader:A,brightness:e}){super("brightness",A),this._brightness=e}setUniforms(A){super.setUniforms(A),this._shader.setUniform("u_brightness",this._brightness)}set brightness(A){this._brightness=A}get brightness(){return this._brightness}}class P5AsciifyColorPaletteEffect extends P5AsciifyEffect{constructor({shader:A,palette:e}){super("colorpalette",A),this._palette=e,this._paletteId=P5Asciify.colorPalette.addPalette(this._palette)}setUniforms(A){super.setUniforms(A),this._shader.setUniform("u_colorPalette",P5Asciify.colorPalette.texture),this._shader.setUniform("u_colorPaletteRow",this._paletteId),this._shader.setUniform("u_colorPaletteDimensions",[P5Asciify.colorPalette.texture.width,P5Asciify.colorPalette.texture.height]),this._shader.setUniform("u_colorPaletteLength",this._palette.length)}set palette(A){this._palette=A,P5Asciify.colorPalette.setPaletteColors(this._paletteId,this._palette)}}class P5Asciify{static config={common:{fontSize:16},brightness:{enabled:!0,characters:"0123456789",characterColor:[1,1,1],characterColorMode:0,backgroundColor:[0,0,0],backgroundColorMode:1,invertMode:!1,rotationAngle:0},edge:{enabled:!1,characters:"-/|\\-/|\\",characterColor:[1,1,1],characterColorMode:0,backgroundColor:[0,0,0],backgroundColorMode:1,invertMode:!1,sobelThreshold:.5,sampleThreshold:16,rotationAngle:0}};static preEffectSetupQueue=[];static preEffectManager=new P5AsciifyEffectManager;static afterEffectSetupQueue=[];static afterEffectManager=new P5AsciifyEffectManager;static colorPalette=new P5AsciifyColorPalette;static preEffectFramebuffer=null;static postEffectFramebuffer=null;static asciiShader=null;static asciiFramebuffer=null;static asciiFramebufferDimensions={width:0,height:0};static sobelShader=null;static sobelFramebuffer=null;static sampleShader=null;static sampleFramebuffer=null;static font=null;static brightnessCharacterSet=new P5AsciifyCharacterSet({characters:"",fontSize:16});static edgeCharacterSet=new P5AsciifyCharacterSet({characters:"",fontSize:16});static grid=new P5AsciifyGrid({cellWidth:0,cellHeight:0});static setup(){this.brightnessCharacterSet.setup({font:this.font,characters:this.config.brightness.characters,fontSize:this.config.common.fontSize}),this.edgeCharacterSet.setup({font:this.font,characters:this.config.edge.characters,fontSize:this.config.common.fontSize}),this.grid.resizeCellDimensions(this.brightnessCharacterSet.maxGlyphDimensions.width,this.brightnessCharacterSet.maxGlyphDimensions.height),this.colorPalette.setup(),this.preEffectManager.setupShaders(),this.preEffectManager.setupEffectQueue(),this.afterEffectManager.setupShaders(),this.afterEffectManager.setupEffectQueue(),this.preEffectFramebuffer=createFramebuffer({format:FLOAT}),this.postEffectFramebuffer=createFramebuffer({format:FLOAT}),this.asciiShader=createShader(P5AsciifyConstants.VERT_SHADER_CODE,P5AsciifyConstants.ASCII_FRAG_SHADER_CODE),this.asciiFramebuffer=createFramebuffer({format:this.FLOAT}),this.sobelShader=createShader(P5AsciifyConstants.VERT_SHADER_CODE,P5AsciifyConstants.SOBEL_FRAG_SHADER_CODE),this.sobelFramebuffer=createFramebuffer({format:this.FLOAT}),this.sampleShader=createShader(P5AsciifyConstants.VERT_SHADER_CODE,P5AsciifyConstants.SAMPLE_FRAG_SHADER_CODE),this.sampleFramebuffer=createFramebuffer({format:this.FLOAT,width:this.grid.cols,height:this.grid.rows}),this.asciiFramebufferDimensions={width:this.asciiFramebuffer.width,height:this.asciiFramebuffer.height},pixelDensity(1)}static checkFramebufferDimensions(){this.asciiFramebufferDimensions.width===this.asciiFramebuffer.width&&this.asciiFramebufferDimensions.height===this.asciiFramebuffer.height||(this.asciiFramebufferDimensions.width=this.asciiFramebuffer.width,this.asciiFramebufferDimensions.height=this.asciiFramebuffer.height,this.grid.reset(),this.sampleFramebuffer.resize(this.grid.cols,this.grid.rows))}static asciify(){this.preEffectFramebuffer.begin(),clear(),image(_renderer,-width/2,-height/2),this.preEffectFramebuffer.end();for(const A of this.preEffectManager._effects)A.enabled&&(this.preEffectFramebuffer.begin(),shader(A.shader),A.setUniforms(this.preEffectFramebuffer),rect(0,0,width,height),this.preEffectFramebuffer.end());this.config.brightness.enabled&&(this.asciiFramebuffer.begin(),shader(this.asciiShader),this.asciiShader.setUniform("u_characterTexture",this.brightnessCharacterSet.texture),this.asciiShader.setUniform("u_charsetCols",this.brightnessCharacterSet.charsetCols),this.asciiShader.setUniform("u_charsetRows",this.brightnessCharacterSet.charsetRows),this.asciiShader.setUniform("u_totalChars",this.brightnessCharacterSet.characters.length),this.asciiShader.setUniform("u_sketchTexture",this.preEffectFramebuffer),this.asciiShader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.asciiShader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.asciiShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.asciiShader.setUniform("u_characterColor",this.config.brightness.characterColor),this.asciiShader.setUniform("u_characterColorMode",this.config.brightness.characterColorMode),this.asciiShader.setUniform("u_backgroundColor",this.config.brightness.backgroundColor),this.asciiShader.setUniform("u_backgroundColorMode",this.config.brightness.backgroundColorMode),this.asciiShader.setUniform("u_invertMode",this.config.brightness.invertMode),this.asciiShader.setUniform("u_renderMode",0),this.asciiShader.setUniform("u_brightnessEnabled",this.config.brightness.enabled),this.asciiShader.setUniform("u_rotationAngle",radians(this.config.brightness.rotationAngle)),rect(0,0,width,height),this.asciiFramebuffer.end()),this.config.edge.enabled&&(this.sobelFramebuffer.begin(),shader(this.sobelShader),this.sobelShader.setUniform("u_texture",this.preEffectFramebuffer),this.sobelShader.setUniform("u_textureSize",[width,height]),this.sobelShader.setUniform("u_threshold",this.config.edge.sobelThreshold),rect(0,0,width,height),this.sobelFramebuffer.end(),this.sampleFramebuffer.begin(),shader(this.sampleShader),this.sampleShader.setUniform("u_image",this.sobelFramebuffer),this.sampleShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.sampleShader.setUniform("u_threshold",this.config.edge.sampleThreshold),rect(0,0,width,height),this.sampleFramebuffer.end(),this.asciiFramebuffer.begin(),shader(this.asciiShader),this.asciiShader.setUniform("u_characterTexture",this.edgeCharacterSet.texture),this.asciiShader.setUniform("u_charsetCols",this.edgeCharacterSet.charsetCols),this.asciiShader.setUniform("u_charsetRows",this.edgeCharacterSet.charsetRows),this.asciiShader.setUniform("u_totalChars",this.edgeCharacterSet.characters.length),this.asciiShader.setUniform("u_sketchTexture",this.preEffectFramebuffer),this.asciiShader.setUniform("u_asciiBrightnessTexture",this.asciiFramebuffer),this.asciiShader.setUniform("u_edgesTexture",this.sampleFramebuffer),this.asciiShader.setUniform("u_gridPixelDimensions",[this.grid.width,this.grid.height]),this.asciiShader.setUniform("u_gridOffsetDimensions",[this.grid.offsetX,this.grid.offsetY]),this.asciiShader.setUniform("u_gridCellDimensions",[this.grid.cols,this.grid.rows]),this.asciiShader.setUniform("u_characterColor",this.config.edge.characterColor),this.asciiShader.setUniform("u_characterColorMode",this.config.edge.characterColorMode),this.asciiShader.setUniform("u_backgroundColor",this.config.edge.backgroundColor),this.asciiShader.setUniform("u_backgroundColorMode",this.config.edge.backgroundColorMode),this.asciiShader.setUniform("u_invertMode",this.config.edge.invertMode),this.asciiShader.setUniform("u_renderMode",1),this.asciiShader.setUniform("u_brightnessEnabled",this.config.brightness.enabled),this.asciiShader.setUniform("u_rotationAngle",radians(this.config.edge.rotationAngle)),rect(0,0,width,height),this.asciiFramebuffer.end()),this.postEffectFramebuffer.begin(),clear(),image(this.asciiFramebuffer,-width/2,-height/2),this.postEffectFramebuffer.end();for(const A of this.afterEffectManager._effects)A.enabled&&(this.postEffectFramebuffer.begin(),shader(A.shader),A.setUniforms(this.postEffectFramebuffer),rect(0,0,width,height),this.postEffectFramebuffer.end());clear(),image(this.postEffectFramebuffer,-width/2,-height/2),this.checkFramebufferDimensions()}static setDefaultOptions(A,e=!0){let t=["fontSize","enabled","characters","characterColor","characterColorMode","backgroundColor","backgroundColorMode","invertMode"],B=t.filter((e=>e in A));B.length>0&&(console.warn(`Warning: Deprecated options detected (${B.join(", ")}). Refer to the documentation for updated options. In v0.1.0, these options will be removed.`),"fontSize"in A&&(A.common={fontSize:A.fontSize},delete A.fontSize),A.brightness=Object.assign({},A),A.characterColor&&(A.characterColor=P5AsciifyUtils.hexToShaderColor(A.characterColor)),A.backgroundColor&&(A.backgroundColor=P5AsciifyUtils.hexToShaderColor(A.backgroundColor)),t.forEach((e=>delete A[e]))),e&&console.warn("'P5Asciify.setDefaultOptions()' is deprecated. Use 'setAsciiOptions()' instead. P5Asciify.setDefaultOptions() will be removed in v0.1.0.");let r=A.brightness&&A.brightness.characters&&A.brightness.characters!==this.config.brightness.characters,E=A.edge&&A.edge.characters&&A.edge.characters!==this.config.edge.characters,Q=A.common&&A.common.fontSize&&A.common.fontSize!==this.config.common.fontSize;A.brightness&&(A.brightness.characterColor&&(A.brightness.characterColor=P5AsciifyUtils.hexToShaderColor(A.brightness.characterColor)),A.brightness.backgroundColor&&(A.brightness.backgroundColor=P5AsciifyUtils.hexToShaderColor(A.brightness.backgroundColor))),A.edge&&(A.edge.characterColor&&(A.edge.characterColor=P5AsciifyUtils.hexToShaderColor(A.edge.characterColor)),A.edge.backgroundColor&&(A.edge.backgroundColor=P5AsciifyUtils.hexToShaderColor(A.edge.backgroundColor)));const g=P5AsciifyUtils.deepMerge({...this.config},A);if(Q&&(A.common.fontSize>512||A.common.fontSize<1)&&(console.warn(`P5Asciify: Font size ${A.common.fontSize} is out of bounds. It should be between 1 and 512. Font size not updated.`),Q=!1,g.common.fontSize=this.config.common.fontSize),E&&8!==A.edge.characters.length&&(console.warn("P5Asciify: The edge character set must contain exactly 8 characters. Character set not updated."),E=!1,g.edge.characters=this.config.edge.characters),0!=frameCount){if(r){const e=this.brightnessCharacterSet.getUnsupportedCharacters(A.brightness.characters);0===e.length?(g.brightness.characters=A.brightness.characters,this.brightnessCharacterSet.setCharacterSet(A.brightness.characters)):console.warn(`P5Asciify: The following brightness characters are not supported by the current font: [${Array.from(e).join(", ")}]. Character set not updated.`)}if(E){const e=this.edgeCharacterSet.getUnsupportedCharacters(A.edge.characters);0===e.length?(g.edge.characters=A.edge.characters,this.edgeCharacterSet.setCharacterSet(A.edge.characters)):console.warn(`P5Asciify: The following edge characters are not supported by the current font: [${Array.from(e).join(", ")}]. Character set not updated.`)}this.config=g,Q&&(this.brightnessCharacterSet.setFontSize(this.config.common.fontSize),this.edgeCharacterSet.setFontSize(this.config.common.fontSize),this.grid.resizeCellDimensions(this.brightnessCharacterSet.maxGlyphDimensions.width,this.brightnessCharacterSet.maxGlyphDimensions.height),this.sampleFramebuffer.resize(this.grid.cols,this.grid.rows))}else this.config=g}}window.preload=function(){},p5.prototype.preloadAsciiFont=function(){this._incrementPreload(),this.loadAsciiFont(P5AsciifyConstants.URSAFONT_BASE64)},p5.prototype.registerMethod("beforePreload",p5.prototype.preloadAsciiFont),p5.prototype.loadAsciiFont=function(A){const e=A=>{P5Asciify.font=A,this.frameCount>0&&(P5Asciify.characterset.setFontObject(A),P5Asciify.grid.resizeCellDimensions(P5Asciify.characterset.maxGlyphDimensions.width,P5Asciify.characterset.maxGlyphDimensions.height))};if("string"==typeof A)this.loadFont(A,(A=>{e(A),this._decrementPreload()}),(()=>{throw new P5AsciifyError(`loadAsciiFont() | Failed to load font from path: '${A}'`)}));else{if("object"!=typeof A)throw new P5AsciifyError("loadAsciiFont() | Invalid font parameter. Expected a string or an object.");e(A)}},p5.prototype.registerPreloadMethod("loadAsciiFont",p5.prototype),p5.prototype.setupAsciifier=function(){if(this._renderer.drawingContext instanceof CanvasRenderingContext2D)throw new P5AsciifyError("WebGL renderer is required for p5.asciify to work.");if(P5AsciifyUtils.compareVersions(this.VERSION,"1.8.0")<0)throw new P5AsciifyError("p5.asciify requires p5.js v1.8.0 or higher to work.");P5Asciify.setup()},p5.prototype.registerMethod("afterSetup",p5.prototype.setupAsciifier),p5.prototype.updateAsciiFont=function(A){console.warn("updateAsciiFont() is deprecated. Use loadAsciiFont() instead. updateAsciiFont() will be removed in v0.1.0."),this.loadAsciiFont(A)},p5.prototype.setAsciiOptions=function(A){P5Asciify.setDefaultOptions(A,!1)},p5.prototype.addAsciiEffect=function(A,e,t={}){if("pre"===A)return P5Asciify.preEffectManager.addEffect(e,t);if("post"===A)return P5Asciify.afterEffectManager.addEffect(e,t);throw new P5AsciifyError(`Invalid effect type '${A}'. Valid types are 'pre' and 'after'.`)},p5.prototype.removeAsciiEffect=function(A){let e=!1;if(P5Asciify.preEffectManager.hasEffect(A)&&(P5Asciify.preEffectManager.removeEffect(A),e=!0),P5Asciify.afterEffectManager.hasEffect(A)&&(P5Asciify.afterEffectManager.removeEffect(A),e=!0),!e)throw new P5AsciifyError("Effect instance not found in either pre or post effect managers.")},p5.prototype.swapAsciiEffects=function(A,e){let t=null,B=null,r=-1,E=-1;if(P5Asciify.preEffectManager.hasEffect(A))t=P5Asciify.preEffectManager,r=t.getEffectIndex(A);else{if(!P5Asciify.afterEffectManager.hasEffect(A))throw new P5AsciifyError("Effect instance 1 not found in either pre or post effect managers.");t=P5Asciify.afterEffectManager,r=t.getEffectIndex(A)}if(P5Asciify.preEffectManager.hasEffect(e))B=P5Asciify.preEffectManager,E=B.getEffectIndex(e);else{if(!P5Asciify.afterEffectManager.hasEffect(e))throw new P5AsciifyError("Effect instance 2 not found in either pre or post effect managers.");B=P5Asciify.afterEffectManager,E=B.getEffectIndex(e)}t!==B?(t.removeEffect(A),B.removeEffect(e),t.addExistingEffectAtIndex(e,r),B.addExistingEffectAtIndex(A,E)):t.swapEffects(A,e)},p5.prototype.preDrawAddPush=function(){this.push()},p5.prototype.registerMethod("pre",p5.prototype.preDrawAddPush),p5.prototype.postDrawAddPop=function(){this.pop()},p5.prototype.registerMethod("post",p5.prototype.postDrawAddPop),p5.prototype.asciify=function(){P5Asciify.asciify()},p5.prototype.registerMethod("post",p5.prototype.asciify);